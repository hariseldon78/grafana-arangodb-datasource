{"version":3,"file":"module.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,wBAAwB;AAC3C,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,gBAAgB,mBAAO,CAAC,0DAAa;AACrC;AACA,oDAAoD,eAAe;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,uCAAuC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;;;;;;;;;;;AC7Ha;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY,GAAG,eAAe,GAAG,WAAW,GAAG,oBAAoB,GAAG,2BAA2B,GAAG,kBAAkB;AACtH;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAO,CAAC,wDAAY;AACvC,qBAAqB,mBAAO,CAAC,4DAAc;AAC3C,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,eAAe,mBAAO,CAAC,gDAAQ;AAC/B;AACA,4CAA4C,eAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA,QAAQ,mCAAmC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA,gBAAgB;AAChB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB,EAAE,eAAe;AAC1D;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK,EAAE,eAAe;AAC3C;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,gDAAgD,MAAM;AACtD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe;AACf;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,MAAM,IAAI,IAAI;AAC7D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,2BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA,YAAY;AACZ;;;;;;;;;;;AC3Ua;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,wBAAwB,GAAG,sBAAsB,GAAG,0BAA0B,GAAG,0BAA0B;AAChI;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,8CAAO;AAC7B,iBAAiB,mBAAO,CAAC,oDAAU;AACnC,oBAAoB,mBAAO,CAAC,0DAAa;AACzC,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,kBAAkB,mBAAO,CAAC,sDAAW;AACrC,gBAAgB,mBAAO,CAAC,0DAAa;AACrC;AACA,oDAAoD,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kDAAkD,wBAAwB,KAAK;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,gBAAgB,oFAAoF;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,0CAA0C,+BAA+B;AACzE,aAAa;AACb;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE,SAAS;AACT;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE,SAAS;AACT;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE,kBAAkB,SAAS;AAC3B,SAAS;AACT;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE,SAAS;AACT;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,SAAS;AACT;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,gBAAgB,+CAA+C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,kEAAkE;AAC1G;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,gBAAgB,6BAA6B;AAC7C;AACA;AACA,oCAAoC,+BAA+B;AACnE,kBAAkB,eAAe;AACjC;AACA;AACA,SAAS;AACT;AACA,yCAAyC;AACzC;AACA,wBAAwB;AACxB;AACA,gBAAgB,8FAA8F;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kEAAkE;AACtG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA;AACA,SAAS;AACT;AACA,2CAA2C;AAC3C,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA,oCAAoC,kEAAkE;AACtG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA;AACA,SAAS;AACT;AACA,0CAA0C;AAC1C,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA,oCAAoC,kEAAkE;AACtG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA;AACA,SAAS;AACT;AACA,iCAAiC;AACjC,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA,oCAAoC,kEAAkE;AACtG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA;AACA,SAAS;AACT;AACA,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA,iCAAiC,+BAA+B;AAChE;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C,SAAS;AACT;AACA;AACA;AACA,iCAAiC,6DAA6D;AAC9F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C,SAAS;AACT;AACA;AACA;AACA;AACA,iCAAiC,6DAA6D;AAC9F,SAAS;AACT;AACA,iCAAiC,oBAAoB,IAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,SAAS;AACT;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;;AC9iBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,0BAA0B;AAC/C,wBAAwB,mBAAO,CAAC,kEAAe;AAC/C,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,eAAe,mBAAO,CAAC,4DAAY;AACnC,gBAAgB,mBAAO,CAAC,0DAAa;AACrC,uBAAuB,mBAAO,CAAC,wEAAoB;AACnD,yBAAyB,mBAAO,CAAC,4EAAsB;AACvD,kBAAkB,mBAAO,CAAC,kEAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbgBAAgB,oBAAoB;AACpC,4BAA4B,eAAe,EAAE,WAAW;AACxD;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA,6BAA6B,yCAAyC;AACtE;AACA,0BAA0B,mBAAmB,IAAI;AACjD;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA,iDAAiD,4BAA4B,cAAc,GAAG,cAAc,GAAG;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iCAAiC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iCAAiC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8BAA8B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2CAA2C;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0KAA0K;AACxL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8CAA8C;AAC1F;AACA;AACA;AACA;AACA,gDAAgD,8CAA8C;AAC9F;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;;AC7ea;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,0BAA0B;AAChD;AACA;AACA,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,kEAAe;AAC/C;AACA,6DAA6D,kBAAkB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,eAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6BAA6B;AAC/D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,oCAAoC;AACpC;AACA,oCAAoC;AACpC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,kDAAkD;AAClD,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,uDAAuD;AACvD,4BAA4B;AAC5B,sDAAsD;AACtD,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,QAAQ;AACR,4BAA4B;AAC5B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAiC,GAAG,iCAAiC;AAC7E,QAAQ,kCAAkC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,QAAQ;AACR,6BAA6B;AAC7B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,QAAQ;AACR,6BAA6B;AAC7B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,QAAQ;AACR,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,6BAA6B;AAC7B;AACA;AACA;AACA,WAAW;AACX;AACA,qCAAqC;AACrC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6BAA6B;AAC/D,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,IAAI,8BAA8B;AAClC;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0BAA0B;AACpC;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,wCAAwC;AACxC,0CAA0C;AAC1C,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,QAAQ;AACR,4BAA4B;AAC5B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0BAA0B,GAAG,0BAA0B;AAC/D,QAAQ,2BAA2B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,6BAA6B;AAC7B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,6BAA6B;AAC7B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,8BAA8B;AAC9B,QAAQ;AACR,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,6BAA6B;AAC7B;AACA;AACA;AACA,WAAW;AACX;AACA,qCAAqC;AACrC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;;ACzvBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,wBAAwB;AAC3C,mBAAmB,mBAAO,CAAC,wDAAY;AACvC,cAAc,mBAAO,CAAC,8CAAO;AAC7B,qBAAqB,mBAAO,CAAC,4DAAc;AAC3C,qBAAqB,mBAAO,CAAC,4DAAc;AAC3C,iBAAiB,mBAAO,CAAC,oDAAU;AACnC,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,gBAAgB,mBAAO,CAAC,0DAAa;AACrC,oBAAoB,mBAAO,CAAC,sEAAiB;AAC7C,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,sBAAsB,mBAAO,CAAC,8DAAe;AAC7C,eAAe,mBAAO,CAAC,gDAAQ;AAC/B;AACA,mDAAmD,eAAe;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B,SAAS;AACT;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,mCAAmC,2CAA2C;AAC9E;AACA;AACA;AACA;AACA;AACA,cAAc,yCAAyC;AACvD;AACA,+BAA+B,+BAA+B,EAAE,eAAe;AAC/E;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA,QAAQ,wBAAwB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iCAAiC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA,8BAA8B,+BAA+B,EAAE,eAAe;AAC9E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yBAAyB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,gBAAgB,oBAAoB;AACpC,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB,qDAAqD;AACzE,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C,QAAQ,iCAAiC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C,QAAQ,6BAA6B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6BAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C,QAAQ,6BAA6B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA;AACA;AACA,iBAAiB,kCAAkC;AACnD,QAAQ,yBAAyB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6BAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iCAAiC;AACrE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qCAAqC,KAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iCAAiC;AACpE;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mCAAmC;AACzE,oBAAoB,gCAAgC;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qCAAqC,KAAK;AAClD;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uBAAuB;AACrD;AACA;AACA,qEAAqE;AACrE;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iBAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sBAAsB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D,oBAAoB,gCAAgC;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA,QAAQ,iBAAiB;AACzB;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA,QAAQ,yBAAyB;AACjC;AACA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D,SAAS;AACT;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD,SAAS;AACT;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,2BAA2B;AAC/E;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,gCAAgC,6BAA6B,YAAY,iCAAiC,EAAE,OAAO;AACnH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,mCAAmC,8BAA8B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B,YAAY,iCAAiC,EAAE,OAAO;AACnH,oBAAoB,OAAO;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qBAAqB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,wBAAwB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B,YAAY,iCAAiC,EAAE,OAAO;AACnH,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D,kBAAkB,MAAM;AACxB,SAAS;AACT;AACA,wDAAwD;AACxD,gBAAgB,sCAAsC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,kBAAkB,+BAA+B;AACjD;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,gBAAgB,sCAAsC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA;AACA,QAAQ,+BAA+B;AACvC;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+FAA+F;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB,gCAAgC,KAAK,yBAAyB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD,QAAQ,gCAAgC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4BAA4B;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2BAA2B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAqD;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6BAA6B;AACjD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yBAAyB;AAChE,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAK,IAAI,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;;;;;;;;;;;ACz8Da;AACb;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS,oCAAoC,eAAe;AACxG;AACA;AACA;AACA,cAAc,eAAe,GAAG,SAAS;AACzC;AACA,uBAAuB;AACvB;;;;;;;;;;;ACpCa;AACb;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,mBAAmB,GAAG,qBAAqB,GAAG,6BAA6B,GAAG,qBAAqB;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,kBAAkB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;;;;;;;;;;ACtKa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa,GAAG,2BAA2B,GAAG,6BAA6B,GAAG,qBAAqB;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAO,CAAC,4DAAc;AAC3C,oBAAoB,mBAAO,CAAC,0DAAa;AACzC,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,gBAAgB,mBAAO,CAAC,0DAAa;AACrC;AACA,mDAAmD,kBAAkB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,YAAY,iDAAiD;AAC7D,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qCAAqC,kBAAkB,kBAAkB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qCAAqC;AAC/C;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oCAAoC,UAAU,kEAAkE;AACvJ,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,wBAAwB;AACxB;AACA,gBAAgB,2DAA2D;AAC3E;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,UAAU,kEAAkE;AACnJ;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,UAAU,+BAA+B;AAChH;AACA;AACA,SAAS;AACT;AACA,4CAA4C;AAC5C;AACA,wBAAwB;AACxB;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,UAAU,kEAAkE;AACnJ;AACA;AACA;AACA,SAAS;AACT;AACA,2CAA2C;AAC3C;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,UAAU,kEAAkE;AACnJ;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC;AACjC;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,UAAU,kEAAkE;AACnJ;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B;AAC7B;AACA,iBAAiB,iCAAiC,eAAe,kBAAkB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAiC;AAC3C;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oCAAoC,QAAQ,kEAAkE;AACrJ,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,wBAAwB;AACxB;AACA,gBAAgB,2DAA2D;AAC3E;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,QAAQ,kEAAkE;AACjJ;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,QAAQ,+BAA+B;AAC9G;AACA;AACA,SAAS;AACT;AACA,4CAA4C;AAC5C;AACA,wBAAwB;AACxB;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,QAAQ,kEAAkE;AACjJ;AACA;AACA;AACA,SAAS;AACT;AACA,2CAA2C;AAC3C;AACA,wBAAwB;AACxB;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,QAAQ,kEAAkE;AACjJ;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC;AACjC;AACA,wBAAwB;AACxB;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,QAAQ,kEAAkE;AACjJ;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB,+BAA+B,GAAG;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,wCAAwC;AACxC,gBAAgB,2EAA2E;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uEAAuE;AAClG,aAAa;AACb,kBAAkB,aAAa;AAC/B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE,kBAAkB,iBAAiB;AACnC,SAAS;AACT;AACA;AACA,kBAAkB,mCAAmC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB,+BAA+B,UAAU;AAClG;AACA;AACA;AACA,oBAAoB,mCAAmC;AACvD;AACA,iBAAiB,wCAAwC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,gBAAgB,sBAAsB;AACtC;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA,2BAA2B,uEAAuE;AAClG,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B,UAAU,qEAAqE;AACjJ;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,kBAAkB,iCAAiC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB,+BAA+B,QAAQ;AAChG;AACA;AACA;AACA,oBAAoB,iCAAiC;AACrD;AACA,iBAAiB,sCAAsC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,kDAAkD;AAClD,gBAAgB,sBAAsB;AACtC;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA,2BAA2B,uEAAuE;AAClG,aAAa;AACb,SAAS;AACT;AACA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA,mCAAmC,+BAA+B,QAAQ,qEAAqE;AAC/I;AACA;AACA,2BAA2B,uEAAuE;AAClG,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B,QAAQ,qEAAqE;AAC/I;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB,0CAA0C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa,QAAQ;AACvD;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;;;;;;;;;;;ACpzBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,WAAW,GAAG,gBAAgB;AACjD,mBAAmB,mBAAO,CAAC,wDAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,kBAAe;AACf,YAAY,mBAAO,CAAC,8CAAO;AAC3B,uCAAsC,EAAE,qCAAqC,qBAAqB,EAAC;AACnG,iBAAiB,mBAAO,CAAC,wDAAY;AACrC,4CAA2C,EAAE,qCAAqC,+BAA+B,EAAC;AAClH;;;;;;;;;;;AClBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS,oCAAoC,eAAe;AACrG;AACA;AACA;AACA,cAAc,eAAe,GAAG,SAAS;AACzC;AACA,oBAAoB;AACpB;;;;;;;;;;;ACxCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;;;;;;;;;;ACjBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,0BAA0B,GAAG,sBAAsB,GAAG,4BAA4B,GAAG,0BAA0B,GAAG,0BAA0B,GAAG,6BAA6B,GAAG,qCAAqC,GAAG,6BAA6B;AAC9Q,6BAA6B;AAC7B,qCAAqC;AACrC,6BAA6B;AAC7B,0BAA0B;AAC1B,0BAA0B;AAC1B,4BAA4B;AAC5B,sBAAsB;AACtB,0BAA0B;AAC1B,uBAAuB;AACvB;;;;;;;;;;;ACpBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY;AACjC;AACA,cAAc;AACd;;;;;;;;;;;AClCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB,UAAU,QAAQ;AACrD;AACA;AACA,oBAAoB;AACpB;;;;;;;;;;;ACtBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;;;;;;;;;;ACvBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,sBAAsB,mBAAO,CAAC,+DAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;;;;;ACnBa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB,GAAG,iBAAiB;AACzC,eAAe,mBAAO,CAAC,wDAAQ;AAC/B,eAAe,mBAAO,CAAC,oDAAQ;AAC/B,cAAc,mBAAO,CAAC,kDAAO;AAC7B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB,GAAG,cAAc;AACtF;AACA;AACA;AACA,8BAA8B,4DAA4D;AAC1F;AACA;AACA;AACA,qBAAqB,YAAY,GAAG,uBAAuB;AAC3D;AACA;AACA;AACA,gDAAgD,KAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;;;;;;;;;;ACrFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA,mFAAgC;AAChC;;;;;;;;;;;ACba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qCAAqC;AACnE;AACA;AACA;AACA;AACA,8BAA8B,kCAAkC;AAChE;AACA;AACA;AACA;AACA,8BAA8B,mCAAmC;AACjE;AACA;AACA;AACA;AACA,8BAA8B,0CAA0C;AACxE;AACA;AACA;AACA;AACA,8BAA8B,yCAAyC;AACvE;AACA;AACA;AACA;AACA,8BAA8B,wCAAwC;AACtE;AACA;AACA,aAAa;AACb;;;;;;;;;;;AC5Ga;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,2BAA2B;AACjD,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,gBAAgB,mBAAO,CAAC,0DAAa;AACrC;AACA,mDAAmD,kBAAkB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,4CAA4C,wBAAwB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oCAAoC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4BAA4B;AACnE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA,uBAAuB;AACvB,gBAAgB,6BAA6B;AAC7C;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA,sBAAsB;AACtB,gBAAgB,6BAA6B;AAC7C;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B;AACzE;AACA;AACA,yDAAyD,eAAe;AACxE,0DAA0D,gBAAgB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,QAAQ;AACR;AACA;AACA;AACA;AACA,kDAAkD;AAClD,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;;AC3Ua;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY,GAAG,oBAAoB;AACnC,gBAAgB,mBAAO,CAAC,kDAAS;AACjC,gBAAgB,mBAAO,CAAC,0DAAa;AACrC;AACA,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D,SAAS;AACT;AACA;AAC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,wDAAa;;AAEpC;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC9CA,iBAAiB,mBAAO,CAAC,4DAAe;AACxC,eAAe,mBAAO,CAAC,sDAAY;AACnC,mBAAmB,mBAAO,CAAC,8DAAgB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC3DA,eAAe,mBAAO,CAAC,sDAAY;AACnC,kBAAkB,mBAAO,CAAC,8DAAgB;AAC1C,mBAAmB,mBAAO,CAAC,gEAAiB;;AAE5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChCA,eAAe,mBAAO,CAAC,sDAAY;AACnC,eAAe,mBAAO,CAAC,wDAAa;AACpC,kBAAkB,mBAAO,CAAC,8DAAgB;;AAE1C;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChBA,eAAe,mBAAO,CAAC,sDAAY;AACnC,qBAAqB,mBAAO,CAAC,oEAAmB;AAChD,eAAe,mBAAO,CAAC,sDAAY;;AAEnC;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACbA,WAAW,mBAAO,CAAC,gDAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;ACLA,gBAAgB,mBAAO,CAAC,0DAAc;;AAEtC;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,IAAI;AACJ,CAAC;;AAED;;;;;;;;;;;ACVA;AACA,wBAAwB,qBAAM,gBAAgB,qBAAM,IAAI,qBAAM,sBAAsB,qBAAM;;AAE1F;;;;;;;;;;;ACHA,mBAAmB,mBAAO,CAAC,gEAAiB;AAC5C,eAAe,mBAAO,CAAC,wDAAa;;AAEpC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChBA,aAAa,mBAAO,CAAC,oDAAW;;AAEhC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACZA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACxBA,SAAS,mBAAO,CAAC,0CAAM;AACvB,kBAAkB,mBAAO,CAAC,4DAAe;AACzC,cAAc,mBAAO,CAAC,sDAAY;AAClC,eAAe,mBAAO,CAAC,sDAAY;;AAEnC;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC7BA,iBAAiB,mBAAO,CAAC,4DAAe;;AAExC;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACnBA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA,iBAAiB,mBAAO,CAAC,4DAAe;;AAExC;AACA,kBAAkB,KAA0B;;AAE5C;AACA,gCAAgC,QAAa;;AAE7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,CAAC;;AAED;;;;;;;;;;;AC7BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACrBA,YAAY,mBAAO,CAAC,kDAAU;;AAE9B;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACnCA,iBAAiB,mBAAO,CAAC,4DAAe;;AAExC;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;ACRA,sBAAsB,mBAAO,CAAC,sEAAoB;AAClD,eAAe,mBAAO,CAAC,wDAAa;;AAEpC;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;;AAEA;;;;;;;;;;;ACbA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACpCA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,UAAU;AACvB;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA,YAAY,QAAQ,IAAI,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACzBA,eAAe,mBAAO,CAAC,wDAAa;AACpC,SAAS,mBAAO,CAAC,0CAAM;AACvB,qBAAqB,mBAAO,CAAC,oEAAmB;AAChD,aAAa,mBAAO,CAAC,kDAAU;;AAE/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,WAAW;AACtB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,gBAAgB,QAAQ,IAAI,QAAQ,IAAI,QAAQ;AAChD,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,GAAG;AAChB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACpBA,sBAAsB,mBAAO,CAAC,sEAAoB;AAClD,mBAAmB,mBAAO,CAAC,8DAAgB;;AAE3C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;;AAEA;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACzBA,iBAAiB,mBAAO,CAAC,0DAAc;AACvC,eAAe,mBAAO,CAAC,sDAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChCA,WAAW,mBAAO,CAAC,gDAAS;AAC5B,gBAAgB,mBAAO,CAAC,wDAAa;;AAErC;AACA,kBAAkB,KAA0B;;AAE5C;AACA,gCAAgC,QAAa;;AAE7C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACrCA,iBAAiB,mBAAO,CAAC,4DAAe;AACxC,eAAe,mBAAO,CAAC,sDAAY;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACpCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC5BA,uBAAuB,mBAAO,CAAC,wEAAqB;AACpD,gBAAgB,mBAAO,CAAC,0DAAc;AACtC,eAAe,mBAAO,CAAC,wDAAa;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC1BA,oBAAoB,mBAAO,CAAC,kEAAkB;AAC9C,iBAAiB,mBAAO,CAAC,4DAAe;AACxC,kBAAkB,mBAAO,CAAC,4DAAe;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AC/Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,mBAAO,CAAC,8EAAkB;AACnkBAAkB;AAClB;;;;;;;;;;;ACnca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;;;;;ACxEa;AACb;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,SAAS,mBAAO,CAAC,sEAAc;AAC/B,SAAS,mBAAO,CAAC,8EAAkB;AACnC;;;;;;;;;;;ACPa;AACb,aAAa,mBAAO,CAAC,uDAAe;AACpC,iBAAiB,mBAAO,CAAC,yDAAa;AACtC,mBAAmB,mBAAO,CAAC,qEAAe;AAC1C,YAAY,mBAAO,CAAC,iDAAO;;AAE3B;AACA;AACA,yBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,MAAM;AACN,iCAAiC,SAAS;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;;;;;;;;;;ACtPA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB,sBAAsB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,SAAS;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;AC/Da;;AAEb,cAAc,GAAG,kGAAmC;AACpD,cAAc,GAAG,sGAAuC;;;;;;;;;;;;ACHxD;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;;;;;;;;;;;;;;;;ACJiD;AACP;AACI;AACF;AAGrC,IAAMmG,MAAM,GAAG,IAAID,2DAAgB,CAA2CzD,mDAAU,CAAC,CAC7F2D,eAAe,CAAC1I,uDAAY,CAAC,CAC7B2I,cAAc,CAACtH,qDAAW,CAAC,C","sources":["webpack:///../node_modules/arangojs/analyzer.js","webpack:///../node_modules/arangojs/aql.js","webpack:///../node_modules/arangojs/collection.js","webpack:///../node_modules/arangojs/connection.js","webpack:///../node_modules/arangojs/cursor.js","webpack:///../node_modules/arangojs/database.js","webpack:///../node_modules/arangojs/documents.js","webpack:///../node_modules/arangojs/error.js","webpack:///../node_modules/arangojs/graph.js","webpack:///../node_modules/arangojs/index.js","webpack:///../node_modules/arangojs/indexes.js","webpack:///../node_modules/arangojs/lib/btoa.web.js","webpack:///../node_modules/arangojs/lib/codes.js","webpack:///../node_modules/arangojs/lib/multipart.web.js","webpack:///../node_modules/arangojs/lib/normalizeUrl.js","webpack:///../node_modules/arangojs/lib/omit.js","webpack:///../node_modules/arangojs/lib/querystringify.js","webpack:///../node_modules/arangojs/lib/request.web.js","webpack:///../node_modules/arangojs/lib/xhr.js","webpack:///../node_modules/arangojs/route.js","webpack:///../node_modules/arangojs/transaction.js","webpack:///../node_modules/arangojs/view.js","webpack:///./ConfigEditor.tsx","webpack:///./QueryEditor.tsx","webpack:///./datasource.ts","webpack:///./types.ts","webpack:///../node_modules/dayjs/dayjs.min.js","webpack:///../node_modules/dayjs/plugin/advancedFormat.js","webpack:///../node_modules/dayjs/plugin/customParseFormat.js","webpack:///../node_modules/global/window.js","webpack:///../node_modules/is-function/index.js","webpack:///../node_modules/lodash/_Symbol.js","webpack:///../node_modules/lodash/_apply.js","webpack:///../node_modules/lodash/_arrayLikeKeys.js","webpack:///../node_modules/lodash/_baseGetTag.js","webpack:///../node_modules/lodash/_baseIsArguments.js","webpack:///../node_modules/lodash/_baseIsNative.js","webpack:///../node_modules/lodash/_baseIsTypedArray.js","webpack:///../node_modules/lodash/_baseKeysIn.js","webpack:///../node_modules/lodash/_baseRest.js","webpack:///../node_modules/lodash/_baseSetToString.js","webpack:///../node_modules/lodash/_baseTimes.js","webpack:///../node_modules/lodash/_baseUnary.js","webpack:///../node_modules/lodash/_coreJsData.js","webpack:///../node_modules/lodash/_defineProperty.js","webpack:///../node_modules/lodash/_freeGlobal.js","webpack:///../node_modules/lodash/_getNative.js","webpack:///../node_modules/lodash/_getRawTag.js","webpack:///../node_modules/lodash/_getValue.js","webpack:///../node_modules/lodash/_isIndex.js","webpack:///../node_modules/lodash/_isIterateeCall.js","webpack:///../node_modules/lodash/_isMasked.js","webpack:///../node_modules/lodash/_isPrototype.js","webpack:///../node_modules/lodash/_nativeKeysIn.js","webpack:///../node_modules/lodash/_nodeUtil.js","webpack:///../node_modules/lodash/_objectToString.js","webpack:///../node_modules/lodash/_overRest.js","webpack:///../node_modules/lodash/_root.js","webpack:///../node_modules/lodash/_setToString.js","webpack:///../node_modules/lodash/_shortOut.js","webpack:///../node_modules/lodash/_toSource.js","webpack:///../node_modules/lodash/constant.js","webpack:///../node_modules/lodash/defaults.js","webpack:///../node_modules/lodash/eq.js","webpack:///../node_modules/lodash/identity.js","webpack:///../node_modules/lodash/isArguments.js","webpack:///../node_modules/lodash/isArray.js","webpack:///../node_modules/lodash/isArrayLike.js","webpack:///../node_modules/lodash/isBuffer.js","webpack:///../node_modules/lodash/isFunction.js","webpack:///../node_modules/lodash/isLength.js","webpack:///../node_modules/lodash/isObject.js","webpack:///../node_modules/lodash/isObjectLike.js","webpack:///../node_modules/lodash/isTypedArray.js","webpack:///../node_modules/lodash/keysIn.js","webpack:///../node_modules/lodash/stubFalse.js","webpack:///../node_modules/parse-headers/parse-headers.js","webpack:///../node_modules/x3-linkedlist/dist/LinkedList.js","webpack:///../node_modules/x3-linkedlist/dist/LinkedListItem.js","webpack:///../node_modules/x3-linkedlist/dist/index.js","webpack:///../node_modules/xhr/index.js","webpack:///../node_modules/xtend/immutable.js","webpack:///../../../node_modules/querystring/decode.js","webpack:///../../../node_modules/querystring/encode.js","webpack:///../../../node_modules/querystring/index.js","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/node module decorator","webpack:///./module.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Analyzer = exports.isArangoAnalyzer = void 0;\nconst error_1 = require(\"./error\");\nconst codes_1 = require(\"./lib/codes\");\n/**\n * Indicates whether the given value represents an {@link Analyzer}.\n *\n * @param analyzer - A value that might be an Analyzer.\n */\nfunction isArangoAnalyzer(analyzer) {\n    return Boolean(analyzer && analyzer.isArangoAnalyzer);\n}\nexports.isArangoAnalyzer = isArangoAnalyzer;\n/**\n * Represents an Analyzer in a {@link database.Database}.\n */\nclass Analyzer {\n    /**\n     * @internal\n     */\n    constructor(db, name) {\n        this._db = db;\n        this._name = name.normalize(\"NFC\");\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB Analyzer.\n     */\n    get isArangoAnalyzer() {\n        return true;\n    }\n    /**\n     * Name of this Analyzer.\n     *\n     * See also {@link database.Database}.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Checks whether the Analyzer exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"some-analyzer\");\n     * const result = await analyzer.exists();\n     * // result indicates whether the Analyzer exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.ANALYZER_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Retrieves the Analyzer definition for the Analyzer.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"some-analyzer\");\n     * const definition = await analyzer.get();\n     * // definition contains the Analyzer definition\n     * ```\n     */\n    get() {\n        return this._db.request({\n            path: `/_api/analyzer/${encodeURIComponent(this._name)}`,\n        });\n    }\n    /**\n     * Creates a new Analyzer with the given `options` and the instance's name.\n     *\n     * See also {@link database.Database#createAnalyzer}.\n     *\n     * @param options - Options for creating the Analyzer.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"potatoes\");\n     * await analyzer.create({ type: \"identity\" });\n     * // the identity Analyzer \"potatoes\" now exists\n     * ```\n     */\n    create(options) {\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/analyzer\",\n            body: { name: this._name, ...options },\n        });\n    }\n    /**\n     * Deletes the Analyzer from the database.\n     *\n     * @param force - Whether the Analyzer should still be deleted even if it\n     * is currently in use.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"some-analyzer\");\n     * await analyzer.drop();\n     * // the Analyzer \"some-analyzer\" no longer exists\n     * ```\n     */\n    drop(force = false) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/analyzer/${encodeURIComponent(this._name)}`,\n            qs: { force },\n        });\n    }\n}\nexports.Analyzer = Analyzer;\n//# sourceMappingURL=analyzer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.join = exports.literal = exports.aql = exports.isAqlLiteral = exports.isGeneratedAqlQuery = exports.isAqlQuery = void 0;\n/**\n * ```js\n * import { aql } from \"arangojs/aql\";\n * ```\n *\n * The \"aql\" module provides the {@link aql} template string handler and\n * helper functions, as well as associated types and interfaces for TypeScript.\n *\n * The aql function and namespace is also re-exported by the \"index\" module.\n *\n * @packageDocumentation\n */\nconst analyzer_1 = require(\"./analyzer\");\nconst collection_1 = require(\"./collection\");\nconst graph_1 = require(\"./graph\");\nconst view_1 = require(\"./view\");\n/**\n * Indicates whether the given value is an {@link AqlQuery}.\n *\n * @param query - A value that might be an `AqlQuery`.\n */\nfunction isAqlQuery(query) {\n    return Boolean(query && typeof query.query === \"string\" && query.bindVars);\n}\nexports.isAqlQuery = isAqlQuery;\n/**\n * Indicates whether the given value is a {@link GeneratedAqlQuery}.\n *\n * @param query - A value that might be a `GeneratedAqlQuery`.\n *\n * @internal\n */\nfunction isGeneratedAqlQuery(query) {\n    return isAqlQuery(query) && typeof query._source === \"function\";\n}\nexports.isGeneratedAqlQuery = isGeneratedAqlQuery;\n/**\n * Indicates whether the given value is an {@link AqlLiteral}.\n *\n * @param literal - A value that might be an `AqlLiteral`.\n */\nfunction isAqlLiteral(literal) {\n    return Boolean(literal && typeof literal.toAQL === \"function\");\n}\nexports.isAqlLiteral = isAqlLiteral;\n/**\n * Template string handler (template tag) for AQL queries.\n *\n * The `aql` tag can be used to write complex AQL queries as multi-line strings\n * without having to worry about `bindVars` and the distinction between\n * collections and regular parameters.\n *\n * Tagged template strings will return an {@link AqlQuery} object with\n * `query` and `bindVars` attributes reflecting any interpolated values.\n *\n * Any {@link collection.ArangoCollection} instance used in a query string will\n * be recognized as a collection reference and generate an AQL collection bind\n * parameter instead of a regular AQL value bind parameter.\n *\n * **Note**: you should always use the `aql` template tag when writing\n * dynamic AQL queries instead of using untagged (normal) template strings.\n * Untagged template strings will inline any interpolated values and return\n * a plain string as result. The `aql` template tag will only inline references\n * to the interpolated values and produce an AQL query object containing both\n * the query and the values. This prevents most injection attacks when using\n * untrusted values in dynamic queries.\n *\n * @example\n * ```js\n * // Some user-supplied string that may be malicious\n * const untrustedValue = req.body.email;\n *\n * // Without aql tag: BAD! DO NOT DO THIS!\n * const badQuery = `\n *   FOR user IN users\n *   FILTER user.email == \"${untrustedValue}\"\n *   RETURN user\n * `;\n * // e.g. if untrustedValue is '\" || user.admin == true || \"':\n * // Query:\n * //   FOR user IN users\n * //   FILTER user.email == \"\" || user.admin == true || \"\"\n * //   RETURN user\n *\n * // With the aql tag: GOOD! MUCH SAFER!\n * const betterQuery = aql`\n *   FOR user IN users\n *   FILTER user.email == ${untrustedValue}\n *   RETURN user\n * `;\n * // Query:\n * //   FOR user IN users\n * //   FILTER user.email == @value0\n * //   RETURN user\n * // Bind parameters:\n * //   value0 -> untrustedValue\n * ```\n *\n * @example\n * ```js\n * const collection = db.collection(\"some-collection\");\n * const minValue = 23;\n * const result = await db.query(aql`\n *   FOR d IN ${collection}\n *   FILTER d.num > ${minValue}\n *   RETURN d\n * `);\n *\n * // Equivalent raw query object\n * const result2 = await db.query({\n *   query: `\n *     FOR d IN @@collection\n *     FILTER d.num > @minValue\n *     RETURN d\n *   `,\n *   bindVars: {\n *     \"@collection\": collection.name,\n *     minValue: minValue\n *   }\n * });\n * ```\n *\n * @example\n * ```js\n * const collection = db.collection(\"some-collection\");\n * const color = \"green\";\n * const filter = aql`FILTER d.color == ${color}'`;\n * const result = await db.query(aql`\n *   FOR d IN ${collection}\n *   ${filter}\n *   RETURN d\n * `);\n * ```\n */\nfunction aql(templateStrings, ...args) {\n    const strings = [...templateStrings];\n    const bindVars = {};\n    const bindValues = [];\n    let query = strings[0];\n    for (let i = 0; i < args.length; i++) {\n        const rawValue = args[i];\n        let value = rawValue;\n        if (isGeneratedAqlQuery(rawValue)) {\n            const src = rawValue._source();\n            if (src.args.length) {\n                query += src.strings[0];\n                args.splice(i, 1, ...src.args);\n                strings.splice(i, 2, strings[i] + src.strings[0], ...src.strings.slice(1, src.args.length), src.strings[src.args.length] + strings[i + 1]);\n            }\n            else {\n                query += rawValue.query + strings[i + 1];\n                args.splice(i, 1);\n                strings.splice(i, 2, strings[i] + rawValue.query + strings[i + 1]);\n            }\n            i -= 1;\n            continue;\n        }\n        if (rawValue === undefined) {\n            query += strings[i + 1];\n            continue;\n        }\n        if (isAqlLiteral(rawValue)) {\n            query += `${rawValue.toAQL()}${strings[i + 1]}`;\n            continue;\n        }\n        const index = bindValues.indexOf(rawValue);\n        const isKnown = index !== -1;\n        let name = `value${isKnown ? index : bindValues.length}`;\n        if ((0, collection_1.isArangoCollection)(rawValue) ||\n            (0, graph_1.isArangoGraph)(rawValue) ||\n            (0, view_1.isArangoView)(rawValue) ||\n            (0, analyzer_1.isArangoAnalyzer)(rawValue)) {\n            name = `@${name}`;\n            value = rawValue.name;\n        }\n        if (!isKnown) {\n            bindValues.push(rawValue);\n            bindVars[name] = value;\n        }\n        query += `@${name}${strings[i + 1]}`;\n    }\n    return {\n        query,\n        bindVars,\n        _source: () => ({ strings, args }),\n    };\n}\nexports.aql = aql;\n/**\n * Marks an arbitrary scalar value (i.e. a string, number or boolean) as\n * safe for being inlined directly into AQL queries when used in an `aql`\n * template string, rather than being converted into a bind parameter.\n *\n * **Note**: Nesting `aql` template strings is a much safer alternative for\n * most use cases. This low-level helper function only exists to help with\n * rare edge cases where a trusted AQL query fragment must be read from a\n * string (e.g. when reading query fragments from JSON) and should only be\n * used as a last resort.\n *\n * @example\n * ```js\n * // BAD! DO NOT DO THIS!\n * const sortDirection = literal('ASC');\n *\n * // GOOD! DO THIS INSTEAD!\n * const sortDirection = aql`ASC`;\n * ```\n *\n * @example\n * ```js\n * // BAD! DO NOT DO THIS!\n * const filterColor = literal('FILTER d.color == \"green\"');\n * const result = await db.query(aql`\n *   FOR d IN some-collection\n *   ${filterColor}\n *   RETURN d\n * `);\n *\n * // GOOD! DO THIS INSTEAD!\n * const color = \"green\";\n * const filterColor = aql`FILTER d.color === ${color}`;\n * const result = await db.query(aql`\n *   FOR d IN some-collection\n *   ${filterColor}\n *   RETURN d\n * `);\n * ```\n *\n * @example\n * ```js\n * // WARNING: We explicitly trust the environment variable to be safe!\n * const filter = literal(process.env.FILTER_STATEMENT);\n * const users = await db.query(aql`\n *   FOR user IN users\n *   ${filter}\n *   RETURN user\n * `);\n * ```\n */\nfunction literal(value) {\n    if (isAqlLiteral(value)) {\n        return value;\n    }\n    return {\n        toAQL() {\n            if (value === undefined) {\n                return \"\";\n            }\n            return String(value);\n        },\n    };\n}\nexports.literal = literal;\n/**\n * Constructs {@link AqlQuery} objects from an array of arbitrary values.\n *\n * **Note**: Nesting `aql` template strings is a much safer alternative\n * for most use cases. This low-level helper function only exists to\n * complement the `aql` tag when constructing complex queries from dynamic\n * arrays of query fragments.\n *\n * @param values - Array of values to join. These values will behave exactly\n * like values interpolated in an `aql` template string.\n * @param sep - Seperator to insert between values. This value will behave\n * exactly like a value passed to {@link literal}, i.e. it will be\n * inlined as-is, rather than being converted into a bind parameter.\n *\n * @example\n * ```js\n * const users = db.collection(\"users\");\n * const filters = [];\n * if (adminsOnly) filters.push(aql`FILTER user.admin`);\n * if (activeOnly) filters.push(aql`FILTER user.active`);\n * const result = await db.query(aql`\n *   FOR user IN ${users}\n *   ${join(filters)}\n *   RETURN user\n * `);\n * ```\n *\n * @example\n * ```js\n * const users = db.collection(\"users\");\n * const keys = [\"jreyes\", \"ghermann\"];\n *\n * // BAD! NEEDLESSLY COMPLEX!\n * const docs = keys.map(key => aql`DOCUMENT(${users}, ${key}`));\n * const result = await db.query(aql`\n *   FOR user IN [\n *     ${join(docs, \", \")}\n *   ]\n *   RETURN user\n * `);\n * // Query:\n * //   FOR user IN [\n * //     DOCUMENT(@@value0, @value1), DOCUMENT(@@value0, @value2)\n * //   ]\n * //   RETURN user\n * // Bind parameters:\n * //   @value0 -> \"users\"\n * //   value1 -> \"jreyes\"\n * //   value2 -> \"ghermann\"\n *\n * // GOOD! MUCH SIMPLER!\n * const result = await db.query(aql`\n *   FOR key IN ${keys}\n *   LET user = DOCUMENT(${users}, key)\n *   RETURN user\n * `);\n * // Query:\n * //   FOR user IN @value0\n * //   LET user = DOCUMENT(@@value1, key)\n * //   RETURN user\n * // Bind parameters:\n * //   value0 -> [\"jreyes\", \"ghermann\"]\n * //   @value1 -> \"users\"\n * ```\n */\nfunction join(values, sep = \" \") {\n    if (!values.length) {\n        return aql ``;\n    }\n    if (values.length === 1) {\n        return aql `${values[0]}`;\n    }\n    return aql([\"\", ...Array(values.length - 1).fill(sep), \"\"], ...values);\n}\nexports.join = join;\n//# sourceMappingURL=aql.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collection = exports.CollectionStatus = exports.CollectionType = exports.collectionToString = exports.isArangoCollection = void 0;\n/**\n * ```ts\n * import type {\n *   DocumentCollection,\n *   EdgeCollection,\n * } from \"arangojs/collection\";\n * ```\n *\n * The \"collection\" module provides collection related types and interfaces\n * for TypeScript.\n *\n * @packageDocumentation\n */\nconst aql_1 = require(\"./aql\");\nconst cursor_1 = require(\"./cursor\");\nconst documents_1 = require(\"./documents\");\nconst error_1 = require(\"./error\");\nconst indexes_1 = require(\"./indexes\");\nconst codes_1 = require(\"./lib/codes\");\n/**\n * Indicates whether the given value represents an {@link ArangoCollection}.\n *\n * @param collection - A value that might be a collection.\n */\nfunction isArangoCollection(collection) {\n    return Boolean(collection && collection.isArangoCollection);\n}\nexports.isArangoCollection = isArangoCollection;\n/**\n * Coerces the given collection name or {@link ArangoCollection} object to\n * a string representing the collection name.\n *\n * @param collection - Collection name or {@link ArangoCollection} object.\n */\nfunction collectionToString(collection) {\n    if (isArangoCollection(collection)) {\n        return String(collection.name);\n    }\n    else\n        return String(collection).normalize(\"NFC\");\n}\nexports.collectionToString = collectionToString;\n/**\n * Integer values indicating the collection type.\n */\nvar CollectionType;\n(function (CollectionType) {\n    CollectionType[CollectionType[\"DOCUMENT_COLLECTION\"] = 2] = \"DOCUMENT_COLLECTION\";\n    CollectionType[CollectionType[\"EDGE_COLLECTION\"] = 3] = \"EDGE_COLLECTION\";\n})(CollectionType = exports.CollectionType || (exports.CollectionType = {}));\n/**\n * Integer values indicating the collection loading status.\n */\nvar CollectionStatus;\n(function (CollectionStatus) {\n    CollectionStatus[CollectionStatus[\"NEWBORN\"] = 1] = \"NEWBORN\";\n    CollectionStatus[CollectionStatus[\"UNLOADED\"] = 2] = \"UNLOADED\";\n    CollectionStatus[CollectionStatus[\"LOADED\"] = 3] = \"LOADED\";\n    CollectionStatus[CollectionStatus[\"UNLOADING\"] = 4] = \"UNLOADING\";\n    CollectionStatus[CollectionStatus[\"DELETED\"] = 5] = \"DELETED\";\n    CollectionStatus[CollectionStatus[\"LOADING\"] = 6] = \"LOADING\";\n})(CollectionStatus = exports.CollectionStatus || (exports.CollectionStatus = {}));\n/**\n * @internal\n */\nclass Collection {\n    //#endregion\n    /**\n     * @internal\n     */\n    constructor(db, name) {\n        this._name = name.normalize(\"NFC\");\n        this._db = db;\n    }\n    //#region metadata\n    get isArangoCollection() {\n        return true;\n    }\n    get name() {\n        return this._name;\n    }\n    get() {\n        return this._db.request({\n            path: `/_api/collection/${encodeURIComponent(this._name)}`,\n        });\n    }\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.COLLECTION_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    create(options = {}) {\n        const { waitForSyncReplication = undefined, enforceReplicationFactor = undefined, ...opts } = options;\n        if (opts.computedValues) {\n            opts.computedValues = opts.computedValues.map((computedValue) => {\n                if ((0, aql_1.isAqlLiteral)(computedValue.expression)) {\n                    return {\n                        ...computedValue,\n                        expression: computedValue.expression.toAQL(),\n                    };\n                }\n                if ((0, aql_1.isAqlQuery)(computedValue.expression)) {\n                    return {\n                        ...computedValue,\n                        expression: computedValue.expression.query,\n                    };\n                }\n                return computedValue;\n            });\n        }\n        const qs = {};\n        if (typeof waitForSyncReplication === \"boolean\") {\n            qs.waitForSyncReplication = waitForSyncReplication ? 1 : 0;\n        }\n        if (typeof enforceReplicationFactor === \"boolean\") {\n            qs.enforceReplicationFactor = enforceReplicationFactor ? 1 : 0;\n        }\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/collection\",\n            qs,\n            body: {\n                ...opts,\n                name: this._name,\n            },\n        });\n    }\n    properties(properties) {\n        if (!properties) {\n            return this._db.request({\n                path: `/_api/collection/${encodeURIComponent(this._name)}/properties`,\n            });\n        }\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${encodeURIComponent(this._name)}/properties`,\n            body: properties,\n        });\n    }\n    count() {\n        return this._db.request({\n            path: `/_api/collection/${encodeURIComponent(this._name)}/count`,\n        });\n    }\n    async recalculateCount() {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${encodeURIComponent(this._name)}/recalculateCount`,\n        }, (res) => res.body.result);\n    }\n    figures(details = false) {\n        return this._db.request({\n            path: `/_api/collection/${encodeURIComponent(this._name)}/figures`,\n            qs: { details },\n        });\n    }\n    revision() {\n        return this._db.request({\n            path: `/_api/collection/${encodeURIComponent(this._name)}/revision`,\n        });\n    }\n    checksum(options) {\n        return this._db.request({\n            path: `/_api/collection/${encodeURIComponent(this._name)}/checksum`,\n            qs: options,\n        });\n    }\n    async loadIndexes() {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${encodeURIComponent(this._name)}/loadIndexesIntoMemory`,\n        }, (res) => res.body.result);\n    }\n    async rename(newName) {\n        const result = await this._db.renameCollection(this._name, newName);\n        this._name = newName.normalize(\"NFC\");\n        return result;\n    }\n    truncate() {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${this._name}/truncate`,\n        });\n    }\n    drop(options) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/collection/${encodeURIComponent(this._name)}`,\n            qs: options,\n        });\n    }\n    //#endregion\n    //#region crud\n    getResponsibleShard(document) {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${encodeURIComponent(this._name)}/responsibleShard`,\n            body: document,\n        }, (res) => res.body.shardId);\n    }\n    documentId(selector) {\n        return (0, documents_1._documentHandle)(selector, this._name);\n    }\n    async documentExists(selector, options = {}) {\n        const { ifMatch = undefined, ifNoneMatch = undefined } = options;\n        const headers = {};\n        if (ifMatch)\n            headers[\"if-match\"] = ifMatch;\n        if (ifNoneMatch)\n            headers[\"if-none-match\"] = ifNoneMatch;\n        try {\n            return await this._db.request({\n                method: \"HEAD\",\n                path: `/_api/document/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n                headers,\n            }, (res) => {\n                if (ifNoneMatch && res.statusCode === 304) {\n                    throw new error_1.HttpError(res);\n                }\n                return true;\n            });\n        }\n        catch (err) {\n            if (err.code === 404) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    documents(selectors, options = {}) {\n        const { allowDirtyRead = undefined } = options;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            qs: { onlyget: true },\n            allowDirtyRead,\n            body: selectors,\n        });\n    }\n    async document(selector, options = {}) {\n        if (typeof options === \"boolean\") {\n            options = { graceful: options };\n        }\n        const { allowDirtyRead = undefined, graceful = false, ifMatch = undefined, ifNoneMatch = undefined, } = options;\n        const headers = {};\n        if (ifMatch)\n            headers[\"if-match\"] = ifMatch;\n        if (ifNoneMatch)\n            headers[\"if-none-match\"] = ifNoneMatch;\n        const result = this._db.request({\n            path: `/_api/document/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            headers,\n            allowDirtyRead,\n        }, (res) => {\n            if (ifNoneMatch && res.statusCode === 304) {\n                throw new error_1.HttpError(res);\n            }\n            return res.body;\n        });\n        if (!graceful)\n            return result;\n        try {\n            return await result;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.DOCUMENT_NOT_FOUND) {\n                return null;\n            }\n            throw err;\n        }\n    }\n    save(data, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: data,\n            qs: options,\n        }, (res) => (options?.silent ? undefined : res.body));\n    }\n    saveAll(data, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: data,\n            qs: options,\n        }, (res) => (options?.silent ? undefined : res.body));\n    }\n    replace(selector, newData, options = {}) {\n        const { ifMatch = undefined, ...opts } = options;\n        const headers = {};\n        if (ifMatch)\n            headers[\"if-match\"] = ifMatch;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/document/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            headers,\n            body: newData,\n            qs: opts,\n        }, (res) => (options?.silent ? undefined : res.body));\n    }\n    replaceAll(newData, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: newData,\n            qs: options,\n        }, (res) => (options?.silent ? undefined : res.body));\n    }\n    update(selector, newData, options = {}) {\n        const { ifMatch = undefined, ...opts } = options;\n        const headers = {};\n        if (ifMatch)\n            headers[\"if-match\"] = ifMatch;\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/document/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            headers,\n            body: newData,\n            qs: opts,\n        }, (res) => (options?.silent ? undefined : res.body));\n    }\n    updateAll(newData, options) {\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: newData,\n            qs: options,\n        }, (res) => (options?.silent ? undefined : res.body));\n    }\n    remove(selector, options = {}) {\n        const { ifMatch = undefined, ...opts } = options;\n        const headers = {};\n        if (ifMatch)\n            headers[\"if-match\"] = ifMatch;\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/document/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            headers,\n            qs: opts,\n        }, (res) => (options?.silent ? undefined : res.body));\n    }\n    removeAll(selectors, options) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: selectors,\n            qs: options,\n        }, (res) => (options?.silent ? undefined : res.body));\n    }\n    import(data, options = {}) {\n        const qs = { ...options, collection: this._name };\n        if (Array.isArray(data)) {\n            qs.type = Array.isArray(data[0]) ? undefined : \"documents\";\n            const lines = data;\n            data = lines.map((line) => JSON.stringify(line)).join(\"\\r\\n\") + \"\\r\\n\";\n        }\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/import\",\n            body: data,\n            isBinary: true,\n            qs,\n        });\n    }\n    //#endregion\n    //#region edges\n    _edges(selector, options, direction) {\n        const { allowDirtyRead = undefined } = options;\n        return this._db.request({\n            path: `/_api/edges/${encodeURIComponent(this._name)}`,\n            allowDirtyRead,\n            qs: {\n                direction,\n                vertex: (0, documents_1._documentHandle)(selector, this._name, false),\n            },\n        });\n    }\n    edges(vertex, options) {\n        return this._edges(vertex, options);\n    }\n    inEdges(vertex, options) {\n        return this._edges(vertex, options, \"in\");\n    }\n    outEdges(vertex, options) {\n        return this._edges(vertex, options, \"out\");\n    }\n    traversal(startVertex, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/traversal\",\n            body: {\n                ...options,\n                startVertex,\n                edgeCollection: this._name,\n            },\n        }, (res) => res.body.result);\n    }\n    //#endregion\n    //#region simple queries\n    list(type = \"id\") {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/all-keys\",\n            body: { type, collection: this._name },\n        }, (res) => new cursor_1.BatchedArrayCursor(this._db, res.body, res.arangojsHostUrl).items);\n    }\n    all(options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/all\",\n            body: {\n                ...options,\n                collection: this._name,\n            },\n        }, (res) => new cursor_1.BatchedArrayCursor(this._db, res.body, res.arangojsHostUrl).items);\n    }\n    any() {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/any\",\n            body: { collection: this._name },\n        }, (res) => res.body.document);\n    }\n    byExample(example, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/by-example\",\n            body: {\n                ...options,\n                example,\n                collection: this._name,\n            },\n        }, (res) => new cursor_1.BatchedArrayCursor(this._db, res.body, res.arangojsHostUrl).items);\n    }\n    firstExample(example) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/first-example\",\n            body: {\n                example,\n                collection: this._name,\n            },\n        }, (res) => res.body.document);\n    }\n    removeByExample(example, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/remove-by-example\",\n            body: {\n                ...options,\n                example,\n                collection: this._name,\n            },\n        });\n    }\n    replaceByExample(example, newValue, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/replace-by-example\",\n            body: {\n                ...options,\n                example,\n                newValue,\n                collection: this._name,\n            },\n        });\n    }\n    updateByExample(example, newValue, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/update-by-example\",\n            body: {\n                ...options,\n                example,\n                newValue,\n                collection: this._name,\n            },\n        });\n    }\n    lookupByKeys(keys) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/lookup-by-keys\",\n            body: {\n                keys,\n                collection: this._name,\n            },\n        }, (res) => res.body.documents);\n    }\n    removeByKeys(keys, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/remove-by-keys\",\n            body: {\n                options: options,\n                keys,\n                collection: this._name,\n            },\n        });\n    }\n    //#endregion\n    //#region indexes\n    indexes() {\n        return this._db.request({\n            path: \"/_api/index\",\n            qs: { collection: this._name },\n        }, (res) => res.body.indexes);\n    }\n    index(selector) {\n        return this._db.request({\n            path: `/_api/index/${encodeURI((0, indexes_1._indexHandle)(selector, this._name))}`,\n        });\n    }\n    ensureIndex(options) {\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/index\",\n            body: options,\n            qs: { collection: this._name },\n        });\n    }\n    dropIndex(selector) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/index/${encodeURI((0, indexes_1._indexHandle)(selector, this._name))}`,\n        });\n    }\n    fulltext(attribute, query, { index, ...options } = {}) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/fulltext\",\n            body: {\n                ...options,\n                index: index ? (0, indexes_1._indexHandle)(index, this._name) : undefined,\n                attribute,\n                query,\n                collection: this._name,\n            },\n        }, (res) => new cursor_1.BatchedArrayCursor(this._db, res.body, res.arangojsHostUrl).items);\n    }\n    compact() {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${this._name}/compact`,\n        }, (res) => res.body);\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connection = exports.isArangoConnection = void 0;\nconst x3_linkedlist_1 = require(\"x3-linkedlist\");\nconst error_1 = require(\"./error\");\nconst btoa_1 = require(\"./lib/btoa\");\nconst codes_1 = require(\"./lib/codes\");\nconst normalizeUrl_1 = require(\"./lib/normalizeUrl\");\nconst querystringify_1 = require(\"./lib/querystringify\");\nconst request_1 = require(\"./lib/request\");\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\nfunction isBearerAuth(auth) {\n    return auth.hasOwnProperty(\"token\");\n}\n/**\n * @internal\n */\nfunction generateStackTrace() {\n    let err = new Error();\n    if (!err.stack) {\n        try {\n            throw err;\n        }\n        catch (e) {\n            err = e;\n        }\n    }\n    return err;\n}\n/**\n * Indicates whether the given value represents a {@link Connection}.\n *\n * @param connection - A value that might be a connection.\n *\n * @internal\n */\nfunction isArangoConnection(connection) {\n    return Boolean(connection && connection.isArangoConnection);\n}\nexports.isArangoConnection = isArangoConnection;\n/**\n * Represents a connection pool shared by one or more databases.\n *\n * @internal\n */\nclass Connection {\n    /**\n     * @internal\n     *\n     * Creates a new `Connection` instance.\n     *\n     * @param config - An object with configuration options.\n     *\n     */\n    constructor(config = {}) {\n        this._activeTasks = 0;\n        this._arangoVersion = 30900;\n        this._queue = new x3_linkedlist_1.LinkedList();\n        this._databases = new Map();\n        this._hosts = [];\n        this._hostUrls = [];\n        this._transactionId = null;\n        this._queueTimes = new x3_linkedlist_1.LinkedList();\n        const URLS = config.url\n            ? Array.isArray(config.url)\n                ? config.url\n                : [config.url]\n            : [\"http://127.0.0.1:8529\"];\n        const MAX_SOCKETS = 3 * (config.loadBalancingStrategy === \"ROUND_ROBIN\" ? URLS.length : 1);\n        if (config.arangoVersion !== undefined) {\n            this._arangoVersion = config.arangoVersion;\n        }\n        this._agent = config.agent;\n        this._agentOptions = request_1.isBrowser\n            ? { maxSockets: MAX_SOCKETS, ...config.agentOptions }\n            : {\n                maxSockets: MAX_SOCKETS,\n                keepAlive: true,\n                keepAliveMsecs: 1000,\n                scheduling: \"lifo\",\n                ...config.agentOptions,\n            };\n        this._maxTasks = this._agentOptions.maxSockets;\n        this._headers = { ...config.headers };\n        this._loadBalancingStrategy = config.loadBalancingStrategy ?? \"NONE\";\n        this._precaptureStackTraces = Boolean(config.precaptureStackTraces);\n        this._responseQueueTimeSamples = config.responseQueueTimeSamples ?? 10;\n        this._retryOnConflict = config.retryOnConflict ?? 0;\n        if (this._responseQueueTimeSamples < 0) {\n            this._responseQueueTimeSamples = Infinity;\n        }\n        if (config.maxRetries === false) {\n            this._maxRetries = false;\n        }\n        else {\n            this._maxRetries = Number(config.maxRetries ?? 0);\n        }\n        this.addToHostList(URLS);\n        if (config.auth) {\n            if (isBearerAuth(config.auth)) {\n                this.setBearerAuth(config.auth);\n            }\n            else {\n                this.setBasicAuth(config.auth);\n            }\n        }\n        if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n            this._activeHostUrl =\n                this._hostUrls[Math.floor(Math.random() * this._hostUrls.length)];\n            this._activeDirtyHostUrl =\n                this._hostUrls[Math.floor(Math.random() * this._hostUrls.length)];\n        }\n        else {\n            this._activeHostUrl = this._hostUrls[0];\n            this._activeDirtyHostUrl = this._hostUrls[0];\n        }\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB connection.\n     */\n    get isArangoConnection() {\n        return true;\n    }\n    get queueTime() {\n        return {\n            getLatest: () => this._queueTimes.last?.value[1],\n            getValues: () => Array.from(this._queueTimes.values()),\n            getAvg: () => {\n                let avg = 0;\n                for (const [, [, value]] of this._queueTimes) {\n                    avg += value / this._queueTimes.length;\n                }\n                return avg;\n            },\n        };\n    }\n    _runQueue() {\n        if (!this._queue.length || this._activeTasks >= this._maxTasks)\n            return;\n        const task = this._queue.shift();\n        let hostUrl = this._activeHostUrl;\n        if (task.hostUrl !== undefined) {\n            hostUrl = task.hostUrl;\n        }\n        else if (task.allowDirtyRead) {\n            hostUrl = this._activeDirtyHostUrl;\n            this._activeDirtyHostUrl =\n                this._hostUrls[(this._hostUrls.indexOf(this._activeDirtyHostUrl) + 1) %\n                    this._hostUrls.length];\n            task.options.headers[\"x-arango-allow-dirty-read\"] = \"true\";\n        }\n        else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n            this._activeHostUrl =\n                this._hostUrls[(this._hostUrls.indexOf(this._activeHostUrl) + 1) %\n                    this._hostUrls.length];\n        }\n        this._activeTasks += 1;\n        const callback = (err, res) => {\n            this._activeTasks -= 1;\n            if (!err && res) {\n                if (res.statusCode === 503 && res.headers[LEADER_ENDPOINT_HEADER]) {\n                    const url = res.headers[LEADER_ENDPOINT_HEADER];\n                    const [cleanUrl] = this.addToHostList(url);\n                    task.hostUrl = cleanUrl;\n                    if (this._activeHostUrl === hostUrl) {\n                        this._activeHostUrl = cleanUrl;\n                    }\n                    this._queue.push(task);\n                }\n                else {\n                    res.arangojsHostUrl = hostUrl;\n                    const contentType = res.headers[\"content-type\"];\n                    const queueTime = res.headers[\"x-arango-queue-time-seconds\"];\n                    if (queueTime) {\n                        this._queueTimes.push([Date.now(), Number(queueTime)]);\n                        while (this._responseQueueTimeSamples < this._queueTimes.length) {\n                            this._queueTimes.shift();\n                        }\n                    }\n                    let parsedBody = undefined;\n                    if (res.body.length && contentType && contentType.match(MIME_JSON)) {\n                        try {\n                            parsedBody = res.body;\n                            parsedBody = JSON.parse(parsedBody);\n                        }\n                        catch (e) {\n                            if (!task.options.expectBinary) {\n                                if (typeof parsedBody !== \"string\") {\n                                    parsedBody = res.body.toString(\"utf-8\");\n                                }\n                                e.res = res;\n                                if (task.stack) {\n                                    e.stack += task.stack();\n                                }\n                                callback(e);\n                                return;\n                            }\n                        }\n                    }\n                    else if (res.body && !task.options.expectBinary) {\n                        parsedBody = res.body.toString(\"utf-8\");\n                    }\n                    else {\n                        parsedBody = res.body;\n                    }\n                    if ((0, error_1.isArangoErrorResponse)(parsedBody)) {\n                        res.body = parsedBody;\n                        err = new error_1.ArangoError(res);\n                    }\n                    else if (res.statusCode && res.statusCode >= 400) {\n                        res.body = parsedBody;\n                        err = new error_1.HttpError(res);\n                    }\n                    else {\n                        if (!task.options.expectBinary)\n                            res.body = parsedBody;\n                        task.resolve(task.transform ? task.transform(res) : res);\n                    }\n                }\n            }\n            if (err) {\n                if (!task.allowDirtyRead &&\n                    this._hosts.length > 1 &&\n                    this._activeHostUrl === hostUrl &&\n                    this._loadBalancingStrategy !== \"ROUND_ROBIN\") {\n                    this._activeHostUrl =\n                        this._hostUrls[(this._hostUrls.indexOf(this._activeHostUrl) + 1) %\n                            this._hostUrls.length];\n                }\n                if ((0, error_1.isArangoError)(err) &&\n                    err.errorNum === codes_1.ERROR_ARANGO_CONFLICT &&\n                    task.retryOnConflict > 0) {\n                    task.retryOnConflict -= 1;\n                    this._queue.push(task);\n                }\n                else if ((((0, error_1.isSystemError)(err) &&\n                    err.syscall === \"connect\" &&\n                    err.code === \"ECONNREFUSED\") ||\n                    ((0, error_1.isArangoError)(err) &&\n                        err.errorNum === codes_1.ERROR_ARANGO_MAINTENANCE_MODE)) &&\n                    task.hostUrl === undefined &&\n                    this._maxRetries !== false &&\n                    task.retries < (this._maxRetries || this._hosts.length - 1)) {\n                    task.retries += 1;\n                    this._queue.push(task);\n                }\n                else {\n                    if (task.stack) {\n                        err.stack += task.stack();\n                    }\n                    task.reject(err);\n                }\n            }\n            this._runQueue();\n        };\n        try {\n            this._hosts[this._hostUrls.indexOf(hostUrl)](task.options, callback);\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n    _buildUrl({ basePath, path, qs }) {\n        const pathname = `${basePath || \"\"}${path || \"\"}`;\n        let search;\n        if (qs) {\n            if (typeof qs === \"string\")\n                search = `?${qs}`;\n            else\n                search = `?${(0, querystringify_1.querystringify)(qs)}`;\n        }\n        return search ? { pathname, search } : { pathname };\n    }\n    setBearerAuth(auth) {\n        this.setHeader(\"authorization\", `Bearer ${auth.token}`);\n    }\n    setBasicAuth(auth) {\n        this.setHeader(\"authorization\", `Basic ${(0, btoa_1.base64Encode)(`${auth.username}:${auth.password}`)}`);\n    }\n    setResponseQueueTimeSamples(responseQueueTimeSamples) {\n        if (responseQueueTimeSamples < 0) {\n            responseQueueTimeSamples = Infinity;\n        }\n        this._responseQueueTimeSamples = responseQueueTimeSamples;\n        while (this._responseQueueTimeSamples < this._queueTimes.length) {\n            this._queueTimes.shift();\n        }\n    }\n    database(databaseName, database) {\n        if (database === null) {\n            this._databases.delete(databaseName);\n            return undefined;\n        }\n        if (!database) {\n            return this._databases.get(databaseName);\n        }\n        this._databases.set(databaseName, database);\n        return database;\n    }\n    /**\n     * @internal\n     *\n     * Replaces the host list with the given URLs.\n     *\n     * See {@link Connection#acquireHostList}.\n     *\n     * @param urls - URLs to use as host list.\n     */\n    setHostList(urls) {\n        const cleanUrls = urls.map((url) => (0, normalizeUrl_1.normalizeUrl)(url));\n        this._hosts.splice(0, this._hosts.length, ...cleanUrls.map((url) => {\n            const i = this._hostUrls.indexOf(url);\n            if (i !== -1)\n                return this._hosts[i];\n            return (0, request_1.createRequest)(url, this._agentOptions, this._agent);\n        }));\n        this._hostUrls.splice(0, this._hostUrls.length, ...cleanUrls);\n    }\n    /**\n     * @internal\n     *\n     * Adds the given URL or URLs to the host list.\n     *\n     * See {@link Connection#acquireHostList}.\n     *\n     * @param urls - URL or URLs to add.\n     */\n    addToHostList(urls) {\n        const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map((url) => (0, normalizeUrl_1.normalizeUrl)(url));\n        const newUrls = cleanUrls.filter((url) => this._hostUrls.indexOf(url) === -1);\n        this._hostUrls.push(...newUrls);\n        this._hosts.push(...newUrls.map((url) => (0, request_1.createRequest)(url, this._agentOptions, this._agent)));\n        return cleanUrls;\n    }\n    /**\n     * @internal\n     *\n     * Sets the connection's active `transactionId`.\n     *\n     * While set, all requests will use this ID, ensuring the requests are executed\n     * within the transaction if possible. Setting the ID manually may cause\n     * unexpected behavior.\n     *\n     * See also {@link Connection#clearTransactionId}.\n     *\n     * @param transactionId - ID of the active transaction.\n     */\n    setTransactionId(transactionId) {\n        this._transactionId = transactionId;\n    }\n    /**\n     * @internal\n     *\n     * Clears the connection's active `transactionId`.\n     */\n    clearTransactionId() {\n        this._transactionId = null;\n    }\n    /**\n     * @internal\n     *\n     * Sets the header `headerName` with the given `value` or clears the header if\n     * `value` is `null`.\n     *\n     * @param headerName - Name of the header to set.\n     * @param value - Value of the header.\n     */\n    setHeader(headerName, value) {\n        if (value === null) {\n            delete this._headers[headerName];\n        }\n        else {\n            this._headers[headerName] = value;\n        }\n    }\n    /**\n     * @internal\n     *\n     * Closes all open connections.\n     *\n     * See {@link database.Database#close}.\n     */\n    close() {\n        for (const host of this._hosts) {\n            if (host.close)\n                host.close();\n        }\n    }\n    /**\n     * @internal\n     *\n     * Waits for propagation.\n     *\n     * See {@link database.Database#waitForPropagation}.\n     *\n     * @param request - Request to perform against each coordinator.\n     * @param timeout - Maximum number of milliseconds to wait for propagation.\n     */\n    async waitForPropagation(request, timeout = Infinity) {\n        const numHosts = this._hosts.length;\n        const propagated = [];\n        const started = Date.now();\n        let index = 0;\n        while (true) {\n            if (propagated.length === numHosts) {\n                return;\n            }\n            while (propagated.includes(this._hostUrls[index])) {\n                index = (index + 1) % numHosts;\n            }\n            const hostUrl = this._hostUrls[index];\n            try {\n                await this.request({ ...request, hostUrl });\n            }\n            catch (e) {\n                if (started + timeout < Date.now()) {\n                    throw e;\n                }\n                await new Promise((resolve) => setTimeout(resolve, 1000));\n                continue;\n            }\n            if (!propagated.includes(hostUrl)) {\n                propagated.push(hostUrl);\n            }\n        }\n    }\n    /**\n     * @internal\n     *\n     * Performs a request using the arangojs connection pool.\n     */\n    request({ hostUrl, method = \"GET\", body, expectBinary = false, isBinary = false, allowDirtyRead = false, retryOnConflict = this._retryOnConflict, timeout = 0, headers, ...urlInfo }, transform) {\n        return new Promise((resolve, reject) => {\n            let contentType = \"text/plain\";\n            if (isBinary) {\n                contentType = \"application/octet-stream\";\n            }\n            else if (body) {\n                if (typeof body === \"object\") {\n                    body = JSON.stringify(body);\n                    contentType = \"application/json\";\n                }\n                else {\n                    body = String(body);\n                }\n            }\n            const extraHeaders = {\n                ...this._headers,\n                \"content-type\": contentType,\n                \"x-arango-version\": String(this._arangoVersion),\n            };\n            if (this._transactionId) {\n                extraHeaders[\"x-arango-trx-id\"] = this._transactionId;\n            }\n            const task = {\n                retries: 0,\n                hostUrl,\n                allowDirtyRead,\n                retryOnConflict,\n                options: {\n                    url: this._buildUrl(urlInfo),\n                    headers: { ...extraHeaders, ...headers },\n                    timeout,\n                    method,\n                    expectBinary,\n                    body,\n                },\n                reject,\n                resolve,\n                transform,\n            };\n            if (this._precaptureStackTraces) {\n                if (typeof Error.captureStackTrace === \"function\") {\n                    const capture = {};\n                    Error.captureStackTrace(capture);\n                    task.stack = () => `\\n${capture.stack.split(\"\\n\").slice(3).join(\"\\n\")}`;\n                }\n                else {\n                    const capture = generateStackTrace();\n                    if (Object.prototype.hasOwnProperty.call(capture, \"stack\")) {\n                        task.stack = () => `\\n${capture.stack.split(\"\\n\").slice(4).join(\"\\n\")}`;\n                    }\n                }\n            }\n            this._queue.push(task);\n            this._runQueue();\n        });\n    }\n}\nexports.Connection = Connection;\n//# sourceMappingURL=connection.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayCursor = exports.BatchedArrayCursor = void 0;\n/**\n * ```ts\n * import type { ArrayCursor, BatchedArrayCursor } from \"arangojs/cursor\";\n * ```\n *\n * The \"cursor\" module provides cursor-related interfaces for TypeScript.\n *\n * @packageDocumentation\n */\nconst x3_linkedlist_1 = require(\"x3-linkedlist\");\n/**\n * The `BatchedArrayCursor` provides a batch-wise API to an {@link ArrayCursor}.\n *\n * When using TypeScript, cursors can be cast to a specific item type in order\n * to increase type safety.\n *\n * @param T - Type to use for each item. Defaults to `any`.\n *\n * @example\n * ```ts\n * const db = new Database();\n * const query = aql`FOR x IN 1..5 RETURN x`;\n * const cursor = await db.query(query) as ArrayCursor<number>;\n * const batches = cursor.batches;\n * ```\n *\n * @example\n * ```js\n * const db = new Database();\n * const query = aql`FOR x IN 1..10000 RETURN x`;\n * const cursor = await db.query(query, { batchSize: 10 });\n * for await (const batch of cursor.batches) {\n *   // Process all values in a batch in parallel\n *   await Promise.all(batch.map(\n *     value => asyncProcessValue(value)\n *   ));\n * }\n * ```\n */\nclass BatchedArrayCursor {\n    /**\n     * @internal\n     */\n    constructor(db, body, hostUrl, allowDirtyRead) {\n        const batches = new x3_linkedlist_1.LinkedList(body.result.length ? [new x3_linkedlist_1.LinkedList(body.result)] : []);\n        this._db = db;\n        this._batches = batches;\n        this._id = body.id;\n        this._hasMore = Boolean(body.id && body.hasMore);\n        this._hostUrl = hostUrl;\n        this._count = body.count;\n        this._extra = body.extra;\n        this._allowDirtyRead = allowDirtyRead;\n        this._itemsCursor = new ArrayCursor(this, {\n            get isEmpty() {\n                return !batches.length;\n            },\n            more: () => this._more(),\n            shift: () => {\n                let batch = batches.first?.value;\n                while (batch && !batch.length) {\n                    batches.shift();\n                    batch = batches.first?.value;\n                }\n                if (!batch)\n                    return undefined;\n                const value = batch.shift();\n                if (!batch.length)\n                    batches.shift();\n                return value;\n            },\n        });\n    }\n    async _more() {\n        if (!this.hasMore)\n            return;\n        const body = await this._db.request({\n            method: \"PUT\",\n            path: `/_api/cursor/${encodeURIComponent(this._id)}`,\n            hostUrl: this._hostUrl,\n            allowDirtyRead: this._allowDirtyRead,\n        });\n        this._batches.push(new x3_linkedlist_1.LinkedList(body.result));\n        this._hasMore = body.hasMore;\n    }\n    /**\n     * An {@link ArrayCursor} providing item-wise access to the cursor result set.\n     *\n     * See also {@link ArrayCursor#batches}.\n     */\n    get items() {\n        return this._itemsCursor;\n    }\n    /**\n     * Additional information about the cursor.\n     */\n    get extra() {\n        return this._extra;\n    }\n    /**\n     * Total number of documents in the query result. Only available if the\n     * `count` option was used.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Whether the cursor has any remaining batches that haven't yet been\n     * fetched. If set to `false`, all batches have been fetched and no\n     * additional requests to the server will be made when consuming any\n     * remaining batches from this cursor.\n     */\n    get hasMore() {\n        return this._hasMore;\n    }\n    /**\n     * Whether the cursor has more batches. If set to `false`, the cursor has\n     * already been depleted and contains no more batches.\n     */\n    get hasNext() {\n        return this.hasMore || Boolean(this._batches.length);\n    }\n    /**\n     * Enables use with `for await` to deplete the cursor by asynchronously\n     * yielding every batch in the cursor's remaining result set.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`\n     *   FOR user IN users\n     *   FILTER user.isActive\n     *   RETURN user\n     * `);\n     * for await (const users of cursor.batches) {\n     *   for (const user of users) {\n     *     console.log(user.email, user.isAdmin);\n     *   }\n     * }\n     * ```\n     */\n    async *[Symbol.asyncIterator]() {\n        while (this.hasNext) {\n            yield this.next();\n        }\n        return undefined;\n    }\n    /**\n     * Loads all remaining batches from the server.\n     *\n     * **Warning**: This may impact memory use when working with very large\n     * query result sets.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 1 }\n     * );\n     * console.log(cursor.hasMore); // true\n     * await cursor.batches.loadAll();\n     * console.log(cursor.hasMore); // false\n     * console.log(cursor.hasNext); // true\n     * for await (const item of cursor) {\n     *   console.log(item);\n     *   // No server roundtrips necessary any more\n     * }\n     * ```\n     */\n    async loadAll() {\n        while (this._hasMore) {\n            await this._more();\n        }\n    }\n    /**\n     * Depletes the cursor, then returns an array containing all batches in the\n     * cursor's remaining result list.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const result = await cursor.batches.all(); // [[1, 2], [3, 4], [5]]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async all() {\n        return this.map((batch) => batch);\n    }\n    /**\n     * Advances the cursor and returns all remaining values in the cursor's\n     * current batch. If the current batch has already been exhausted, fetches\n     * the next batch from the server and returns it, or `undefined` if the\n     * cursor has been depleted.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR i IN 1..10 RETURN i`,\n     *   { batchSize: 5 }\n     * );\n     * const firstBatch = await cursor.batches.next(); // [1, 2, 3, 4, 5]\n     * await cursor.next(); // 6\n     * const lastBatch = await cursor.batches.next(); // [7, 8, 9, 10]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async next() {\n        while (!this._batches.length && this.hasNext) {\n            await this._more();\n        }\n        if (!this._batches.length) {\n            return undefined;\n        }\n        const batch = this._batches.shift();\n        if (!batch)\n            return undefined;\n        const values = [...batch.values()];\n        batch.clear(true);\n        return values;\n    }\n    /**\n     * Advances the cursor by applying the `callback` function to each item in\n     * the cursor's remaining result list until the cursor is depleted or\n     * `callback` returns the exact value `false`. Returns a promise that\n     * evalues to `true` unless the function returned `false`.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * See also:\n     * [`Array.prototype.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n     *\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const result = await cursor.batches.forEach((currentBatch) => {\n     *   for (const value of currentBatch) {\n     *     console.log(value);\n     *   }\n     * });\n     * console.log(result) // true\n     * console.log(cursor.hasNext); // false\n     * ```\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const result = await cursor.batches.forEach((currentBatch) => {\n     *   for (const value of currentBatch) {\n     *     console.log(value);\n     *   }\n     *   return false; // stop after the first batch\n     * });\n     * console.log(result); // false\n     * console.log(cursor.hasNext); // true\n     * ```\n     */\n    async forEach(callback) {\n        let index = 0;\n        while (this.hasNext) {\n            const currentBatch = await this.next();\n            const result = callback(currentBatch, index, this);\n            index++;\n            if (result === false)\n                return result;\n            if (this.hasNext)\n                await this._more();\n        }\n        return true;\n    }\n    /**\n     * Depletes the cursor by applying the `callback` function to each batch in\n     * the cursor's remaining result list. Returns an array containing the\n     * return values of `callback` for each batch.\n     *\n     * **Note**: This creates an array of all return values, which may impact\n     * memory use when working with very large query result sets. Consider using\n     * {@link BatchedArrayCursor#forEach}, {@link BatchedArrayCursor#reduce} or\n     * {@link BatchedArrayCursor#flatMap} instead.\n     *\n     * See also:\n     * [`Array.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n     *\n     * @param R - Return type of the `callback` function.\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const squares = await cursor.batches.map((currentBatch) => {\n     *   return currentBatch.map((value) => value ** 2);\n     * });\n     * console.log(squares); // [[1, 4], [9, 16], [25]]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async map(callback) {\n        let index = 0;\n        const result = [];\n        while (this.hasNext) {\n            const currentBatch = await this.next();\n            result.push(callback(currentBatch, index, this));\n            index++;\n        }\n        return result;\n    }\n    /**\n     * Depletes the cursor by applying the `callback` function to each batch in\n     * the cursor's remaining result list. Returns an array containing the\n     * return values of `callback` for each batch, flattened to a depth of 1.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * See also:\n     * [`Array.prototype.flatMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).\n     *\n     * @param R - Return type of the `callback` function.\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const squares = await cursor.batches.flatMap((currentBatch) => {\n     *   return currentBatch.map((value) => value ** 2);\n     * });\n     * console.log(squares); // [1, 1, 2, 4, 3, 9, 4, 16, 5, 25]\n     * console.log(cursor.hasNext); // false\n     * ```\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 1 }\n     * );\n     * const odds = await cursor.batches.flatMap((currentBatch) => {\n     *   if (currentBatch[0] % 2 === 0) {\n     *     return []; // empty array flattens into nothing\n     *   }\n     *   return currentBatch;\n     * });\n     * console.logs(odds); // [1, 3, 5]\n     * ```\n     */\n    async flatMap(callback) {\n        let index = 0;\n        const result = [];\n        while (this.hasNext) {\n            const currentBatch = await this.next();\n            const value = callback(currentBatch, index, this);\n            if (Array.isArray(value)) {\n                result.push(...value);\n            }\n            else {\n                result.push(value);\n            }\n            index++;\n        }\n        return result;\n    }\n    async reduce(reducer, initialValue) {\n        let index = 0;\n        if (!this.hasNext)\n            return initialValue;\n        if (initialValue === undefined) {\n            initialValue = (await this.next());\n            index += 1;\n        }\n        let value = initialValue;\n        while (this.hasNext) {\n            const currentBatch = await this.next();\n            value = reducer(value, currentBatch, index, this);\n            index++;\n        }\n        return value;\n    }\n    /**\n     * Drains the cursor and frees up associated database resources.\n     *\n     * This method has no effect if all batches have already been consumed.\n     *\n     * @example\n     * ```js\n     * const cursor1 = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * console.log(cursor1.hasMore); // false\n     * await cursor1.kill(); // no effect\n     *\n     * const cursor2 = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * console.log(cursor2.hasMore); // true\n     * await cursor2.kill(); // cursor is depleted\n     * ```\n     */\n    async kill() {\n        if (this._batches.length) {\n            for (const batch of this._batches.values()) {\n                batch.clear();\n            }\n            this._batches.clear();\n        }\n        if (!this.hasNext)\n            return undefined;\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/cursor/${encodeURIComponent(this._id)}`,\n        }, () => {\n            this._hasMore = false;\n            return undefined;\n        });\n    }\n}\nexports.BatchedArrayCursor = BatchedArrayCursor;\n/**\n * The `ArrayCursor` type represents a cursor returned from a\n * {@link database.Database#query}.\n *\n * When using TypeScript, cursors can be cast to a specific item type in order\n * to increase type safety.\n *\n * See also {@link BatchedArrayCursor}.\n *\n * @param T - Type to use for each item. Defaults to `any`.\n *\n * @example\n * ```ts\n * const db = new Database();\n * const query = aql`FOR x IN 1..5 RETURN x`;\n * const result = await db.query(query) as ArrayCursor<number>;\n * ```\n *\n * @example\n * ```js\n * const db = new Database();\n * const query = aql`FOR x IN 1..10 RETURN x`;\n * const cursor = await db.query(query);\n * for await (const value of cursor) {\n *   // Process each value asynchronously\n *   await processValue(value);\n * }\n * ```\n */\nclass ArrayCursor {\n    /**\n     * @internal\n     */\n    constructor(batchedCursor, view) {\n        this._batches = batchedCursor;\n        this._view = view;\n    }\n    /**\n     * A {@link BatchedArrayCursor} providing batch-wise access to the cursor\n     * result set.\n     *\n     * See also {@link BatchedArrayCursor#items}.\n     */\n    get batches() {\n        return this._batches;\n    }\n    /**\n     * Additional information about the cursor.\n     */\n    get extra() {\n        return this.batches.extra;\n    }\n    /**\n     * Total number of documents in the query result. Only available if the\n     * `count` option was used.\n     */\n    get count() {\n        return this.batches.count;\n    }\n    /**\n     * Whether the cursor has more values. If set to `false`, the cursor has\n     * already been depleted and contains no more items.\n     */\n    get hasNext() {\n        return this.batches.hasNext;\n    }\n    /**\n     * Enables use with `for await` to deplete the cursor by asynchronously\n     * yielding every value in the cursor's remaining result set.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`\n     *   FOR user IN users\n     *   FILTER user.isActive\n     *   RETURN user\n     * `);\n     * for await (const user of cursor) {\n     *   console.log(user.email, user.isAdmin);\n     * }\n     * ```\n     */\n    async *[Symbol.asyncIterator]() {\n        while (this.hasNext) {\n            yield this.next();\n        }\n        return undefined;\n    }\n    /**\n     * Depletes the cursor, then returns an array containing all values in the\n     * cursor's remaining result list.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const result = await cursor.all(); // [1, 2, 3, 4, 5]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async all() {\n        return this.batches.flatMap((v) => v);\n    }\n    /**\n     * Advances the cursor and returns the next value in the cursor's remaining\n     * result list, or `undefined` if the cursor has been depleted.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..3 RETURN x`);\n     * const one = await cursor.next(); // 1\n     * const two = await cursor.next(); // 2\n     * const three = await cursor.next(); // 3\n     * const empty = await cursor.next(); // undefined\n     * ```\n     */\n    async next() {\n        while (this._view.isEmpty && this.batches.hasMore) {\n            await this._view.more();\n        }\n        if (this._view.isEmpty) {\n            return undefined;\n        }\n        return this._view.shift();\n    }\n    /**\n     * Advances the cursor by applying the `callback` function to each item in\n     * the cursor's remaining result list until the cursor is depleted or\n     * `callback` returns the exact value `false`. Returns a promise that\n     * evalues to `true` unless the function returned `false`.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * See also:\n     * [`Array.prototype.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n     *\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const result = await cursor.forEach((currentValue) => {\n     *   console.log(currentValue);\n     * });\n     * console.log(result) // true\n     * console.log(cursor.hasNext); // false\n     * ```\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const result = await cursor.forEach((currentValue) => {\n     *   console.log(currentValue);\n     *   return false; // stop after the first item\n     * });\n     * console.log(result); // false\n     * console.log(cursor.hasNext); // true\n     * ```\n     */\n    async forEach(callback) {\n        let index = 0;\n        while (this.hasNext) {\n            const value = await this.next();\n            const result = callback(value, index, this);\n            index++;\n            if (result === false)\n                return result;\n        }\n        return true;\n    }\n    /**\n     * Depletes the cursor by applying the `callback` function to each item in\n     * the cursor's remaining result list. Returns an array containing the\n     * return values of `callback` for each item.\n     *\n     * **Note**: This creates an array of all return values, which may impact\n     * memory use when working with very large query result sets. Consider using\n     * {@link ArrayCursor#forEach}, {@link ArrayCursor#reduce} or\n     * {@link ArrayCursor#flatMap} instead.\n     *\n     * See also:\n     * [`Array.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n     *\n     * @param R - Return type of the `callback` function.\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const squares = await cursor.map((currentValue) => {\n     *   return currentValue ** 2;\n     * });\n     * console.log(squares); // [1, 4, 9, 16, 25]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async map(callback) {\n        let index = 0;\n        const result = [];\n        while (this.hasNext) {\n            const value = await this.next();\n            result.push(callback(value, index, this));\n            index++;\n        }\n        return result;\n    }\n    /**\n     * Depletes the cursor by applying the `callback` function to each item in\n     * the cursor's remaining result list. Returns an array containing the\n     * return values of `callback` for each item, flattened to a depth of 1.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * See also:\n     * [`Array.prototype.flatMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).\n     *\n     * @param R - Return type of the `callback` function.\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const squares = await cursor.flatMap((currentValue) => {\n     *   return [currentValue, currentValue ** 2];\n     * });\n     * console.log(squares); // [1, 1, 2, 4, 3, 9, 4, 16, 5, 25]\n     * console.log(cursor.hasNext); // false\n     * ```\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const odds = await cursor.flatMap((currentValue) => {\n     *   if (currentValue % 2 === 0) {\n     *     return []; // empty array flattens into nothing\n     *   }\n     *   return currentValue; // or [currentValue]\n     * });\n     * console.logs(odds); // [1, 3, 5]\n     * ```\n     */\n    async flatMap(callback) {\n        let index = 0;\n        const result = [];\n        while (this.hasNext) {\n            const value = await this.next();\n            const item = callback(value, index, this);\n            if (Array.isArray(item)) {\n                result.push(...item);\n            }\n            else {\n                result.push(item);\n            }\n            index++;\n        }\n        return result;\n    }\n    async reduce(reducer, initialValue) {\n        let index = 0;\n        if (!this.hasNext)\n            return initialValue;\n        if (initialValue === undefined) {\n            const value = (await this.next());\n            initialValue = value;\n            index += 1;\n        }\n        let value = initialValue;\n        while (this.hasNext) {\n            const item = await this.next();\n            value = reducer(value, item, index, this);\n            index++;\n        }\n        return value;\n    }\n    /**\n     * Kills the cursor and frees up associated database resources.\n     *\n     * This method has no effect if all batches have already been fetched.\n     *\n     * @example\n     * ```js\n     * const cursor1 = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * console.log(cursor1.hasMore); // false\n     * await cursor1.kill(); // no effect\n     *\n     * const cursor2 = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * console.log(cursor2.hasMore); // true\n     * await cursor2.kill(); // cursor is depleted\n     * ```\n     */\n    async kill() {\n        return this.batches.kill();\n    }\n}\nexports.ArrayCursor = ArrayCursor;\n//# sourceMappingURL=cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Database = exports.isArangoDatabase = void 0;\nconst analyzer_1 = require(\"./analyzer\");\nconst aql_1 = require(\"./aql\");\nconst collection_1 = require(\"./collection\");\nconst connection_1 = require(\"./connection\");\nconst cursor_1 = require(\"./cursor\");\nconst error_1 = require(\"./error\");\nconst graph_1 = require(\"./graph\");\nconst codes_1 = require(\"./lib/codes\");\nconst multipart_1 = require(\"./lib/multipart\");\nconst route_1 = require(\"./route\");\nconst transaction_1 = require(\"./transaction\");\nconst view_1 = require(\"./view\");\n/**\n * Indicates whether the given value represents a {@link Database}.\n *\n * @param database - A value that might be a database.\n */\nfunction isArangoDatabase(database) {\n    return Boolean(database && database.isArangoDatabase);\n}\nexports.isArangoDatabase = isArangoDatabase;\n/**\n * @internal\n */\nfunction coerceTransactionCollections(collections) {\n    if (typeof collections === \"string\") {\n        return { write: [collections] };\n    }\n    if (Array.isArray(collections)) {\n        return { write: collections.map(collection_1.collectionToString) };\n    }\n    if ((0, collection_1.isArangoCollection)(collections)) {\n        return { write: (0, collection_1.collectionToString)(collections) };\n    }\n    const cols = {};\n    if (collections) {\n        if (collections.allowImplicit !== undefined) {\n            cols.allowImplicit = collections.allowImplicit;\n        }\n        if (collections.read) {\n            cols.read = Array.isArray(collections.read)\n                ? collections.read.map(collection_1.collectionToString)\n                : (0, collection_1.collectionToString)(collections.read);\n        }\n        if (collections.write) {\n            cols.write = Array.isArray(collections.write)\n                ? collections.write.map(collection_1.collectionToString)\n                : (0, collection_1.collectionToString)(collections.write);\n        }\n        if (collections.exclusive) {\n            cols.exclusive = Array.isArray(collections.exclusive)\n                ? collections.exclusive.map(collection_1.collectionToString)\n                : (0, collection_1.collectionToString)(collections.exclusive);\n        }\n    }\n    return cols;\n}\n/**\n * An object representing a single ArangoDB database. All arangojs collections,\n * cursors, analyzers and so on are linked to a `Database` object.\n */\nclass Database {\n    constructor(configOrDatabase = {}, name) {\n        this._analyzers = new Map();\n        this._collections = new Map();\n        this._graphs = new Map();\n        this._views = new Map();\n        if (isArangoDatabase(configOrDatabase)) {\n            const connection = configOrDatabase._connection;\n            const databaseName = (name || configOrDatabase.name).normalize(\"NFC\");\n            this._connection = connection;\n            this._name = databaseName;\n            const database = connection.database(databaseName);\n            if (database)\n                return database;\n        }\n        else {\n            const config = configOrDatabase;\n            const { databaseName, ...options } = typeof config === \"string\" || Array.isArray(config)\n                ? { databaseName: name, url: config }\n                : config;\n            this._connection = new connection_1.Connection(options);\n            this._name = databaseName?.normalize(\"NFC\") || \"_system\";\n        }\n    }\n    //#region misc\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB database.\n     */\n    get isArangoDatabase() {\n        return true;\n    }\n    /**\n     * Name of the ArangoDB database this instance represents.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Fetches version information from the ArangoDB server.\n     *\n     * @param details - If set to `true`, additional information about the\n     * ArangoDB server will be available as the `details` property.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const version = await db.version();\n     * // the version object contains the ArangoDB version information.\n     * // license: \"community\" or \"enterprise\"\n     * // version: ArangoDB version number\n     * // server: description of the server\n     * ```\n     */\n    version(details) {\n        return this.request({\n            method: \"GET\",\n            path: \"/_api/version\",\n            qs: { details },\n        });\n    }\n    /**\n     * Returns a new {@link route.Route} instance for the given path (relative to the\n     * database) that can be used to perform arbitrary HTTP requests.\n     *\n     * @param path - The database-relative URL of the route. Defaults to the\n     * database API root.\n     * @param headers - Default headers that should be sent with each request to\n     * the route.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const myFoxxService = db.route(\"my-foxx-service\");\n     * const response = await myFoxxService.post(\"users\", {\n     *   username: \"admin\",\n     *   password: \"hunter2\"\n     * });\n     * // response.body is the result of\n     * // POST /_db/_system/my-foxx-service/users\n     * // with JSON request body '{\"username\": \"admin\", \"password\": \"hunter2\"}'\n     * ```\n     */\n    route(path, headers) {\n        return new route_1.Route(this, path, headers);\n    }\n    request({ absolutePath = false, basePath, ...opts }, transform = (res) => res.body) {\n        if (!absolutePath) {\n            basePath = `/_db/${encodeURIComponent(this._name)}${basePath || \"\"}`;\n        }\n        return this._connection.request({ basePath, ...opts }, transform || undefined);\n    }\n    /**\n     * Updates the URL list by requesting a list of all coordinators in the\n     * cluster and adding any endpoints not initially specified in the\n     * {@link connection.Config}.\n     *\n     * For long-running processes communicating with an ArangoDB cluster it is\n     * recommended to run this method periodically (e.g. once per hour) to make\n     * sure new coordinators are picked up correctly and can be used for\n     * fail-over or load balancing.\n     *\n     * @param overwrite - If set to `true`, the existing host list will be\n     * replaced instead of extended.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const interval = setInterval(\n     *   () => db.acquireHostList(),\n     *   5 * 60 * 1000 // every 5 minutes\n     * );\n     *\n     * // later\n     * clearInterval(interval);\n     * system.close();\n     * ```\n     */\n    async acquireHostList(overwrite = false) {\n        const urls = await this.request({ path: \"/_api/cluster/endpoints\" }, (res) => res.body.endpoints.map((endpoint) => endpoint.endpoint));\n        if (urls.length > 0) {\n            if (overwrite)\n                this._connection.setHostList(urls);\n            else\n                this._connection.addToHostList(urls);\n        }\n    }\n    /**\n     * Closes all active connections of this database instance.\n     *\n     * Can be used to clean up idling connections during longer periods of\n     * inactivity.\n     *\n     * **Note**: This method currently has no effect in the browser version of\n     * arangojs.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const sessions = db.collection(\"sessions\");\n     * // Clean up expired sessions once per hour\n     * setInterval(async () => {\n     *   await db.query(aql`\n     *     FOR session IN ${sessions}\n     *     FILTER session.expires < DATE_NOW()\n     *     REMOVE session IN ${sessions}\n     *   `);\n     *   // Making sure to close the connections because they're no longer used\n     *   system.close();\n     * }, 1000 * 60 * 60);\n     * ```\n     */\n    close() {\n        this._connection.close();\n    }\n    async waitForPropagation({ basePath, ...request }, timeout) {\n        await this._connection.waitForPropagation({\n            ...request,\n            basePath: `/_db/${encodeURIComponent(this._name)}${basePath || \"\"}`,\n        }, timeout);\n    }\n    /**\n     * Methods for accessing the server-reported queue times of the mostly\n     * recently received responses.\n     */\n    get queueTime() {\n        return this._connection.queueTime;\n    }\n    /**\n     * Sets the limit for the number of values of the most recently received\n     * server-reported queue times that can be accessed using\n     * {@link Database#queueTime}.\n     *\n     * @param responseQueueTimeSamples - Number of values to maintain.\n     */\n    setResponseQueueTimeSamples(responseQueueTimeSamples) {\n        this._connection.setResponseQueueTimeSamples(responseQueueTimeSamples);\n    }\n    //#endregion\n    //#region auth\n    /**\n     * Updates the underlying connection's `authorization` header to use Basic\n     * authentication with the given `username` and `password`, then returns\n     * itself.\n     *\n     * @param username - The username to authenticate with.\n     * @param password - The password to authenticate with.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * db.useBasicAuth(\"admin\", \"hunter2\");\n     * // with the username \"admin\" and password \"hunter2\".\n     * ```\n     */\n    useBasicAuth(username = \"root\", password = \"\") {\n        this._connection.setBasicAuth({ username, password });\n        return this;\n    }\n    /**\n     * Updates the underlying connection's `authorization` header to use Bearer\n     * authentication with the given authentication `token`, then returns itself.\n     *\n     * @param token - The token to authenticate with.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * db.useBearerAuth(\"keyboardcat\");\n     * // The database instance now uses Bearer authentication.\n     * ```\n     */\n    useBearerAuth(token) {\n        this._connection.setBearerAuth({ token });\n        return this;\n    }\n    /**\n     * Validates the given database credentials and exchanges them for an\n     * authentication token, then uses the authentication token for future\n     * requests and returns it.\n     *\n     * @param username - The username to authenticate with.\n     * @param password - The password to authenticate with.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.login(\"admin\", \"hunter2\");\n     * // with an authentication token for the \"admin\" user.\n     * ```\n     */\n    login(username = \"root\", password = \"\") {\n        return this.request({\n            method: \"POST\",\n            path: \"/_open/auth\",\n            body: { username, password },\n        }, (res) => {\n            this.useBearerAuth(res.body.jwt);\n            return res.body.jwt;\n        });\n    }\n    //#endregion\n    //#region databases\n    /**\n     * Creates a new `Database` instance for the given `databaseName` that\n     * shares this database's connection pool.\n     *\n     * See also {@link Database:constructor}.\n     *\n     * @param databaseName - Name of the database.\n     *\n     * @example\n     * ```js\n     * const systemDb = new Database();\n     * const myDb = system.database(\"my_database\");\n     * ```\n     */\n    database(databaseName) {\n        return new Database(this, databaseName);\n    }\n    /**\n     * Fetches the database description for the active database from the server.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const info = await db.get();\n     * // the database exists\n     * ```\n     */\n    get() {\n        return this.request({ path: \"/_api/database/current\" }, (res) => res.body.result);\n    }\n    /**\n     * Checks whether the database exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const result = await db.exists();\n     * // result indicates whether the database exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.DATABASE_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    createDatabase(databaseName, usersOrOptions = {}) {\n        const { users, ...options } = Array.isArray(usersOrOptions)\n            ? { users: usersOrOptions }\n            : usersOrOptions;\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/database\",\n            body: { name: databaseName.normalize(\"NFC\"), users, options },\n        }, () => this.database(databaseName));\n    }\n    /**\n     * Fetches all databases from the server and returns an array of their names.\n     *\n     * See also {@link Database#databases} and\n     * {@link Database#listUserDatabases}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const names = await db.listDatabases();\n     * // databases is an array of database names\n     * ```\n     */\n    listDatabases() {\n        return this.request({ path: \"/_api/database\" }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all databases accessible to the active user from the server and\n     * returns an array of their names.\n     *\n     * See also {@link Database#userDatabases} and\n     * {@link Database#listDatabases}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const names = await db.listUserDatabases();\n     * // databases is an array of database names\n     * ```\n     */\n    listUserDatabases() {\n        return this.request({ path: \"/_api/database/user\" }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all databases from the server and returns an array of `Database`\n     * instances for those databases.\n     *\n     * See also {@link Database#listDatabases} and\n     * {@link Database#userDatabases}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const names = await db.databases();\n     * // databases is an array of databases\n     * ```\n     */\n    databases() {\n        return this.request({ path: \"/_api/database\" }, (res) => res.body.result.map((databaseName) => this.database(databaseName)));\n    }\n    /**\n     * Fetches all databases accessible to the active user from the server and\n     * returns an array of `Database` instances for those databases.\n     *\n     * See also {@link Database#listUserDatabases} and\n     * {@link Database#databases}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const names = await db.userDatabases();\n     * // databases is an array of databases\n     * ```\n     */\n    userDatabases() {\n        return this.request({ path: \"/_api/database/user\" }, (res) => res.body.result.map((databaseName) => this.database(databaseName)));\n    }\n    /**\n     * Deletes the database with the given `databaseName` from the server.\n     *\n     * @param databaseName - Name of the database to delete.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.dropDatabase(\"mydb\");\n     * // database \"mydb\" no longer exists\n     * ```\n     */\n    dropDatabase(databaseName) {\n        databaseName = databaseName.normalize(\"NFC\");\n        return this.request({\n            method: \"DELETE\",\n            path: `/_api/database/${encodeURIComponent(databaseName)}`,\n        }, (res) => res.body.result);\n    }\n    //#endregion\n    //#region collections\n    /**\n     * Returns a `Collection` instance for the given collection name.\n     *\n     * In TypeScript the collection implements both the\n     * {@link collection.DocumentCollection} and {@link collection.EdgeCollection}\n     * interfaces and can be cast to either type to enforce a stricter API.\n     *\n     * @param T - Type to use for document data. Defaults to `any`.\n     * @param collectionName - Name of the edge collection.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collection = db.collection(\"potatoes\");\n     * ```\n     *\n     * @example\n     * ```ts\n     * interface Person {\n     *   name: string;\n     * }\n     * const db = new Database();\n     * const persons = db.collection<Person>(\"persons\");\n     * ```\n     *\n     * @example\n     * ```ts\n     * interface Person {\n     *   name: string;\n     * }\n     * interface Friend {\n     *   startDate: number;\n     *   endDate?: number;\n     * }\n     * const db = new Database();\n     * const documents = db.collection(\"persons\") as DocumentCollection<Person>;\n     * const edges = db.collection(\"friends\") as EdgeCollection<Friend>;\n     * ```\n     */\n    collection(collectionName) {\n        collectionName = collectionName.normalize(\"NFC\");\n        if (!this._collections.has(collectionName)) {\n            this._collections.set(collectionName, new collection_1.Collection(this, collectionName));\n        }\n        return this._collections.get(collectionName);\n    }\n    async createCollection(collectionName, options) {\n        const collection = this.collection(collectionName);\n        await collection.create(options);\n        return collection;\n    }\n    /**\n     * Creates a new edge collection with the given `collectionName` and\n     * `options`, then returns an {@link collection.EdgeCollection} instance for the new\n     * edge collection.\n     *\n     * This is a convenience method for calling {@link Database#createCollection}\n     * with `options.type` set to `EDGE_COLLECTION`.\n     *\n     * @param T - Type to use for edge document data. Defaults to `any`.\n     * @param collectionName - Name of the new collection.\n     * @param options - Options for creating the collection.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const edges = db.createEdgeCollection(\"friends\");\n     * ```\n     *\n     * @example\n     * ```ts\n     * interface Friend {\n     *   startDate: number;\n     *   endDate?: number;\n     * }\n     * const db = new Database();\n     * const edges = db.createEdgeCollection<Friend>(\"friends\");\n     * ```\n     */\n    async createEdgeCollection(collectionName, options) {\n        return this.createCollection(collectionName, {\n            ...options,\n            type: collection_1.CollectionType.EDGE_COLLECTION,\n        });\n    }\n    /**\n     * Renames the collection `collectionName` to `newName`.\n     *\n     * Additionally removes any stored `Collection` instance for\n     * `collectionName` from the `Database` instance's internal cache.\n     *\n     * **Note**: Renaming collections may not be supported when ArangoDB is\n     * running in a cluster configuration.\n     *\n     * @param collectionName - Current name of the collection.\n     * @param newName - The new name of the collection.\n     */\n    async renameCollection(collectionName, newName) {\n        collectionName = collectionName.normalize(\"NFC\");\n        const result = await this.request({\n            method: \"PUT\",\n            path: `/_api/collection/${encodeURIComponent(collectionName)}/rename`,\n            body: { name: newName.normalize(\"NFC\") },\n        });\n        this._collections.delete(collectionName);\n        return result;\n    }\n    /**\n     * Fetches all collections from the database and returns an array of\n     * collection descriptions.\n     *\n     * See also {@link Database#collections}.\n     *\n     * @param excludeSystem - Whether system collections should be excluded.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collections = await db.listCollections();\n     * // collections is an array of collection descriptions\n     * // not including system collections\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collections = await db.listCollections(false);\n     * // collections is an array of collection descriptions\n     * // including system collections\n     * ```\n     */\n    listCollections(excludeSystem = true) {\n        return this.request({\n            path: \"/_api/collection\",\n            qs: { excludeSystem },\n        }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all collections from the database and returns an array of\n     * `Collection` instances.\n     *\n     * In TypeScript these instances implement both the\n     * {@link collection.DocumentCollection} and {@link collection.EdgeCollection}\n     * interfaces and can be cast to either type to enforce a stricter API.\n     *\n     * See also {@link Database#listCollections}.\n     *\n     * @param excludeSystem - Whether system collections should be excluded.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collections = await db.collections();\n     * // collections is an array of DocumentCollection and EdgeCollection\n     * // instances not including system collections\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collections = await db.collections(false);\n     * // collections is an array of DocumentCollection and EdgeCollection\n     * // instances including system collections\n     * ```\n     */\n    async collections(excludeSystem = true) {\n        const collections = await this.listCollections(excludeSystem);\n        return collections.map((data) => this.collection(data.name));\n    }\n    //#endregion\n    //#region graphs\n    /**\n     * Returns a {@link graph.Graph} instance representing the graph with the given\n     * `graphName`.\n     *\n     * @param graphName - Name of the graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * ```\n     */\n    graph(graphName) {\n        graphName = graphName.normalize(\"NFC\");\n        if (!this._graphs.has(graphName)) {\n            this._graphs.set(graphName, new graph_1.Graph(this, graphName));\n        }\n        return this._graphs.get(graphName);\n    }\n    /**\n     * Creates a graph with the given `graphName` and `edgeDefinitions`, then\n     * returns a {@link graph.Graph} instance for the new graph.\n     *\n     * @param graphName - Name of the graph to be created.\n     * @param edgeDefinitions - An array of edge definitions.\n     * @param options - An object defining the properties of the graph.\n     */\n    async createGraph(graphName, edgeDefinitions, options) {\n        const graph = this.graph(graphName.normalize(\"NFC\"));\n        await graph.create(edgeDefinitions, options);\n        return graph;\n    }\n    /**\n     * Fetches all graphs from the database and returns an array of graph\n     * descriptions.\n     *\n     * See also {@link Database#graphs}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graphs = await db.listGraphs();\n     * // graphs is an array of graph descriptions\n     * ```\n     */\n    listGraphs() {\n        return this.request({ path: \"/_api/gharial\" }, (res) => res.body.graphs);\n    }\n    /**\n     * Fetches all graphs from the database and returns an array of {@link graph.Graph}\n     * instances for those graphs.\n     *\n     * See also {@link Database#listGraphs}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graphs = await db.graphs();\n     * // graphs is an array of Graph instances\n     * ```\n     */\n    async graphs() {\n        const graphs = await this.listGraphs();\n        return graphs.map((data) => this.graph(data._key));\n    }\n    //#endregion\n    //#region views\n    /**\n     * Returns a {@link view.View} instance for the given `viewName`.\n     *\n     * @param viewName - Name of the ArangoSearch or SearchAlias View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"potatoes\");\n     * ```\n     */\n    view(viewName) {\n        viewName = viewName.normalize(\"NFC\");\n        if (!this._views.has(viewName)) {\n            this._views.set(viewName, new view_1.View(this, viewName));\n        }\n        return this._views.get(viewName);\n    }\n    /**\n     * Creates a new View with the given `viewName` and `options`, then returns a\n     * {@link view.View} instance for the new View.\n     *\n     * @param viewName - Name of the View.\n     * @param options - An object defining the properties of the View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = await db.createView(\"potatoes\", { type: \"arangosearch\" });\n     * // the ArangoSearch View \"potatoes\" now exists\n     * ```\n     */\n    async createView(viewName, options) {\n        const view = this.view(viewName.normalize(\"NFC\"));\n        await view.create(options);\n        return view;\n    }\n    /**\n     * Renames the view `viewName` to `newName`.\n     *\n     * Additionally removes any stored {@link view.View} instance for `viewName` from\n     * the `Database` instance's internal cache.\n     *\n     * **Note**: Renaming views may not be supported when ArangoDB is running in\n     * a cluster configuration.\n     *\n     * @param viewName - Current name of the view.\n     * @param newName - The new name of the view.\n     */\n    async renameView(viewName, newName) {\n        viewName = viewName.normalize(\"NFC\");\n        const result = await this.request({\n            method: \"PUT\",\n            path: `/_api/view/${encodeURIComponent(viewName)}/rename`,\n            body: { name: newName.normalize(\"NFC\") },\n        });\n        this._views.delete(viewName);\n        return result;\n    }\n    /**\n     * Fetches all Views from the database and returns an array of View\n     * descriptions.\n     *\n     * See also {@link Database#views}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     *\n     * const views = await db.listViews();\n     * // views is an array of View descriptions\n     * ```\n     */\n    listViews() {\n        return this.request({ path: \"/_api/view\" }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all Views from the database and returns an array of\n     * {@link view.View} instances\n     * for the Views.\n     *\n     * See also {@link Database#listViews}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const views = await db.views();\n     * // views is an array of ArangoSearch View instances\n     * ```\n     */\n    async views() {\n        const views = await this.listViews();\n        return views.map((data) => this.view(data.name));\n    }\n    //#endregion\n    //#region analyzers\n    /**\n     * Returns an {@link analyzer.Analyzer} instance representing the Analyzer with the\n     * given `analyzerName`.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"some-analyzer\");\n     * const info = await analyzer.get();\n     * ```\n     */\n    analyzer(analyzerName) {\n        analyzerName = analyzerName.normalize(\"NFC\");\n        if (!this._analyzers.has(analyzerName)) {\n            this._analyzers.set(analyzerName, new analyzer_1.Analyzer(this, analyzerName));\n        }\n        return this._analyzers.get(analyzerName);\n    }\n    /**\n     * Creates a new Analyzer with the given `analyzerName` and `options`, then\n     * returns an {@link analyzer.Analyzer} instance for the new Analyzer.\n     *\n     * @param analyzerName - Name of the Analyzer.\n     * @param options - An object defining the properties of the Analyzer.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = await db.createAnalyzer(\"potatoes\", { type: \"identity\" });\n     * // the identity Analyzer \"potatoes\" now exists\n     * ```\n     */\n    async createAnalyzer(analyzerName, options) {\n        const analyzer = this.analyzer(analyzerName);\n        await analyzer.create(options);\n        return analyzer;\n    }\n    /**\n     * Fetches all Analyzers visible in the database and returns an array of\n     * Analyzer descriptions.\n     *\n     * See also {@link Database#analyzers}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzers = await db.listAnalyzers();\n     * // analyzers is an array of Analyzer descriptions\n     * ```\n     */\n    listAnalyzers() {\n        return this.request({ path: \"/_api/analyzer\" }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all Analyzers visible in the database and returns an array of\n     * {@link analyzer.Analyzer} instances for those Analyzers.\n     *\n     * See also {@link Database#listAnalyzers}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzers = await db.analyzers();\n     * // analyzers is an array of Analyzer instances\n     * ```\n     */\n    async analyzers() {\n        const analyzers = await this.listAnalyzers();\n        return analyzers.map((data) => this.analyzer(data.name));\n    }\n    //#endregion\n    //#region users\n    /**\n     * Fetches all ArangoDB users visible to the authenticated user and returns\n     * an array of user objects.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const users = await db.listUsers();\n     * // users is an array of user objects\n     * ```\n     */\n    listUsers() {\n        return this.request({\n            absolutePath: true,\n            path: \"/_api/user\",\n        });\n    }\n    /**\n     * Fetches the user data of a single ArangoDB user.\n     *\n     * @param username - Name of the ArangoDB user to fetch.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const user = await db.getUser(\"steve\");\n     * // user is the user object for the user named \"steve\"\n     * ```\n     */\n    getUser(username) {\n        return this.request({\n            absolutePath: true,\n            path: `/_api/user/${encodeURIComponent(username)}`,\n        });\n    }\n    createUser(username, options) {\n        if (typeof options === \"string\") {\n            options = { passwd: options };\n        }\n        return this.request({\n            absolutePath: true,\n            method: \"POST\",\n            path: \"/_api/user\",\n            body: { user: username, ...options },\n        }, (res) => res.body);\n    }\n    updateUser(username, options) {\n        if (typeof options === \"string\") {\n            options = { passwd: options };\n        }\n        return this.request({\n            absolutePath: true,\n            method: \"PATCH\",\n            path: `/api/user/${encodeURIComponent(username)}`,\n            body: options,\n        }, (res) => res.body);\n    }\n    /**\n     * Replaces the ArangoDB user's option with the new options.\n     *\n     * @param username - Name of the ArangoDB user to modify.\n     * @param options - New options to replace the user's existing options.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const user = await db.replaceUser(\"steve\", { passwd: \"\", active: false });\n     * // The user \"steve\" has been set to inactive with an empty password\n     * ```\n     */\n    replaceUser(username, options) {\n        if (typeof options === \"string\") {\n            options = { passwd: options };\n        }\n        return this.request({\n            absolutePath: true,\n            method: \"PUT\",\n            path: `/api/user/${encodeURIComponent(username)}`,\n            body: options,\n        }, (res) => res.body);\n    }\n    /**\n     * Removes the ArangoDB user with the given username from the server.\n     *\n     * @param username - Name of the ArangoDB user to remove.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.removeUser(\"steve\");\n     * // The user \"steve\" has been removed\n     * ```\n     */\n    removeUser(username) {\n        return this.request({\n            absolutePath: true,\n            method: \"DELETE\",\n            path: `/_api/user/${encodeURIComponent(username)}`,\n        }, (res) => res.body);\n    }\n    /**\n     * Fetches the given ArangoDB user's access level for the database, or the\n     * given collection in the given database.\n     *\n     * @param username - Name of the ArangoDB user to fetch the access level for.\n     * @param database - Database to fetch the access level for.\n     * @param collection - Collection to fetch the access level for.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const accessLevel = await db.getUserAccessLevel(\"steve\");\n     * // The access level of the user \"steve\" has been fetched for the current\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   database: \"staging\"\n     * });\n     * // The access level of the user \"steve\" has been fetched for the \"staging\"\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   collection: \"pokemons\"\n     * });\n     * // The access level of the user \"steve\" has been fetched for the\n     * // \"pokemons\" collection in the current database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   database: \"staging\",\n     *   collection: \"pokemons\"\n     * });\n     * // The access level of the user \"steve\" has been fetched for the\n     * // \"pokemons\" collection in the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   database: staging\n     * });\n     * // The access level of the user \"steve\" has been fetched for the \"staging\"\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   collection: staging.collection(\"pokemons\")\n     * });\n     * // The access level of the user \"steve\" has been fetched for the\n     * // \"pokemons\" collection in database \"staging\".\n     * ```\n     */\n    getUserAccessLevel(username, { database, collection }) {\n        const databaseName = isArangoDatabase(database)\n            ? database.name\n            : database?.normalize(\"NFC\") ??\n                ((0, collection_1.isArangoCollection)(collection)\n                    ? collection._db.name\n                    : this._name);\n        const suffix = collection\n            ? `/${encodeURIComponent((0, collection_1.isArangoCollection)(collection)\n                ? collection.name\n                : collection.normalize(\"NFC\"))}`\n            : \"\";\n        return this.request({\n            absolutePath: true,\n            path: `/_api/user/${encodeURIComponent(username)}/database/${encodeURIComponent(databaseName)}${suffix}`,\n        }, (res) => res.body.result);\n    }\n    /**\n     * Sets the given ArangoDB user's access level for the database, or the\n     * given collection in the given database.\n     *\n     * @param username - Name of the ArangoDB user to set the access level for.\n     * @param database - Database to set the access level for.\n     * @param collection - Collection to set the access level for.\n     * @param grant - Access level to set for the given user.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setUserAccessLevel(\"steve\", { grant: \"rw\" });\n     * // The user \"steve\" now has read-write access to the current database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setUserAccessLevel(\"steve\", {\n     *   database: \"staging\",\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setUserAccessLevel(\"steve\", {\n     *   collection: \"pokemons\",\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n     * // in the current database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setUserAccessLevel(\"steve\", {\n     *   database: \"staging\",\n     *   collection: \"pokemons\",\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n     * // in the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * await db.setUserAccessLevel(\"steve\", {\n     *   database: staging,\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * await db.setUserAccessLevel(\"steve\", {\n     *   collection: staging.collection(\"pokemons\"),\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n     * // in database \"staging\".\n     * ```\n     */\n    setUserAccessLevel(username, { database, collection, grant, }) {\n        const databaseName = isArangoDatabase(database)\n            ? database.name\n            : database?.normalize(\"NFC\") ??\n                ((0, collection_1.isArangoCollection)(collection)\n                    ? collection._db.name\n                    : this._name);\n        const suffix = collection\n            ? `/${encodeURIComponent((0, collection_1.isArangoCollection)(collection)\n                ? collection.name\n                : collection.normalize(\"NFC\"))}`\n            : \"\";\n        return this.request({\n            absolutePath: true,\n            method: \"PUT\",\n            path: `/_api/user/${encodeURIComponent(username)}/database/${encodeURIComponent(databaseName)}${suffix}`,\n            body: { grant },\n        }, (res) => res.body);\n    }\n    /**\n     * Clears the given ArangoDB user's access level for the database, or the\n     * given collection in the given database.\n     *\n     * @param username - Name of the ArangoDB user to clear the access level for.\n     * @param database - Database to clear the access level for.\n     * @param collection - Collection to clear the access level for.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearUserAccessLevel(\"steve\");\n     * // The access level of the user \"steve\" has been cleared for the current\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearUserAccessLevel(\"steve\", { database: \"staging\" });\n     * // The access level of the user \"steve\" has been cleared for the \"staging\"\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearUserAccessLevel(\"steve\", { collection: \"pokemons\" });\n     * // The access level of the user \"steve\" has been cleared for the\n     * // \"pokemons\" collection in the current database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearUserAccessLevel(\"steve\", {\n     *   database: \"staging\",\n     *   collection: \"pokemons\"\n     * });\n     * // The access level of the user \"steve\" has been cleared for the\n     * // \"pokemons\" collection in the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * await db.clearUserAccessLevel(\"steve\", { database: staging });\n     * // The access level of the user \"steve\" has been cleared for the \"staging\"\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * await db.clearUserAccessLevel(\"steve\", {\n     *   collection: staging.collection(\"pokemons\")\n     * });\n     * // The access level of the user \"steve\" has been cleared for the\n     * // \"pokemons\" collection in database \"staging\".\n     * ```\n     */\n    clearUserAccessLevel(username, { database, collection }) {\n        const databaseName = isArangoDatabase(database)\n            ? database.name\n            : database?.normalize(\"NFC\") ??\n                ((0, collection_1.isArangoCollection)(collection)\n                    ? collection._db.name\n                    : this._name);\n        const suffix = collection\n            ? `/${encodeURIComponent((0, collection_1.isArangoCollection)(collection)\n                ? collection.name\n                : collection.normalize(\"NFC\"))}`\n            : \"\";\n        return this.request({\n            absolutePath: true,\n            method: \"DELETE\",\n            path: `/_api/user/${encodeURIComponent(username)}/database/${encodeURIComponent(databaseName)}${suffix}`,\n        }, (res) => res.body);\n    }\n    getUserDatabases(username, full) {\n        return this.request({\n            absolutePath: true,\n            path: `/_api/user/${encodeURIComponent(username)}/database`,\n            qs: { full },\n        }, (res) => res.body.result);\n    }\n    executeTransaction(collections, action, options = {}) {\n        const { allowDirtyRead = undefined, ...opts } = options;\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/transaction\",\n            allowDirtyRead,\n            body: {\n                collections: coerceTransactionCollections(collections),\n                action,\n                ...opts,\n            },\n        }, (res) => res.body.result);\n    }\n    /**\n     * Returns a {@link transaction.Transaction} instance for an existing streaming\n     * transaction with the given `id`.\n     *\n     * See also {@link Database#beginTransaction}.\n     *\n     * @param id - The `id` of an existing stream transaction.\n     *\n     * @example\n     * ```js\n     * const trx1 = await db.beginTransaction(collections);\n     * const id = trx1.id;\n     * // later\n     * const trx2 = db.transaction(id);\n     * await trx2.commit();\n     * ```\n     */\n    transaction(transactionId) {\n        return new transaction_1.Transaction(this, transactionId);\n    }\n    beginTransaction(collections, options = {}) {\n        const { allowDirtyRead = undefined, ...opts } = options;\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/transaction/begin\",\n            allowDirtyRead,\n            body: {\n                collections: coerceTransactionCollections(collections),\n                ...opts,\n            },\n        }, (res) => new transaction_1.Transaction(this, res.body.result.id));\n    }\n    /**\n     * Fetches all active transactions from the database and returns an array of\n     * transaction descriptions.\n     *\n     * See also {@link Database#transactions}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const transactions = await db.listTransactions();\n     * // transactions is an array of transaction descriptions\n     * ```\n     */\n    listTransactions() {\n        return this._connection.request({ path: \"/_api/transaction\" }, (res) => res.body.transactions);\n    }\n    /**\n     * Fetches all active transactions from the database and returns an array of\n     * {@link transaction.Transaction} instances for those transactions.\n     *\n     * See also {@link Database#listTransactions}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const transactions = await db.transactions();\n     * // transactions is an array of transactions\n     * ```\n     */\n    async transactions() {\n        const transactions = await this.listTransactions();\n        return transactions.map((data) => this.transaction(data.id));\n    }\n    query(query, bindVars, options = {}) {\n        if ((0, aql_1.isAqlQuery)(query)) {\n            options = bindVars ?? {};\n            bindVars = query.bindVars;\n            query = query.query;\n        }\n        else if ((0, aql_1.isAqlLiteral)(query)) {\n            query = query.toAQL();\n        }\n        const { allowDirtyRead, retryOnConflict, count, batchSize, cache, memoryLimit, ttl, timeout, ...opts } = options;\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/cursor\",\n            body: {\n                query,\n                bindVars,\n                count,\n                batchSize,\n                cache,\n                memoryLimit,\n                ttl,\n                options: opts,\n            },\n            allowDirtyRead,\n            retryOnConflict,\n            timeout,\n        }, (res) => new cursor_1.BatchedArrayCursor(this, res.body, res.arangojsHostUrl, allowDirtyRead).items);\n    }\n    explain(query, bindVars, options) {\n        if ((0, aql_1.isAqlQuery)(query)) {\n            options = bindVars;\n            bindVars = query.bindVars;\n            query = query.query;\n        }\n        else if ((0, aql_1.isAqlLiteral)(query)) {\n            query = query.toAQL();\n        }\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/explain\",\n            body: { query, bindVars, options },\n        });\n    }\n    /**\n     * Parses the given query and returns the result.\n     *\n     * See the {@link aql!aql} template string handler for information about how\n     * to create a query string without manually defining bind parameters nor\n     * having to worry about escaping variables.\n     *\n     * @param query - An AQL query string or an object containing an AQL query\n     * string and bind parameters, e.g. the object returned from an {@link aql!aql}\n     * template string.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collection = db.collection(\"some-collection\");\n     * const ast = await db.parse(aql`\n     *   FOR doc IN ${collection}\n     *   FILTER doc.flavor == \"strawberry\"\n     *   RETURN doc._key\n     * `);\n     * ```\n     */\n    parse(query) {\n        if ((0, aql_1.isAqlQuery)(query)) {\n            query = query.query;\n        }\n        else if ((0, aql_1.isAqlLiteral)(query)) {\n            query = query.toAQL();\n        }\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/query\",\n            body: { query },\n        });\n    }\n    /**\n     * Fetches the available optimizer rules.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const rules = await db.queryRules();\n     * for (const rule of rules) {\n     *   console.log(rule.name);\n     * }\n     * ```\n     */\n    queryRules() {\n        return this.request({\n            path: \"/_api/query/rules\",\n        });\n    }\n    queryTracking(options) {\n        return this.request(options\n            ? {\n                method: \"PUT\",\n                path: \"/_api/query/properties\",\n                body: options,\n            }\n            : {\n                method: \"GET\",\n                path: \"/_api/query/properties\",\n            });\n    }\n    /**\n     * Fetches a list of information for all currently running queries.\n     *\n     * See also {@link Database#listSlowQueries} and {@link Database#killQuery}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const queries = await db.listRunningQueries();\n     * ```\n     */\n    listRunningQueries() {\n        return this.request({\n            method: \"GET\",\n            path: \"/_api/query/current\",\n        });\n    }\n    /**\n     * Fetches a list of information for all recent slow queries.\n     *\n     * See also {@link Database#listRunningQueries} and\n     * {@link Database#clearSlowQueries}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const queries = await db.listSlowQueries();\n     * // Only works if slow query tracking is enabled\n     * ```\n     */\n    listSlowQueries() {\n        return this.request({\n            method: \"GET\",\n            path: \"/_api/query/slow\",\n        });\n    }\n    /**\n     * Clears the list of recent slow queries.\n     *\n     * See also {@link Database#listSlowQueries}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearSlowQueries();\n     * // Slow query list is now cleared\n     * ```\n     */\n    clearSlowQueries() {\n        return this.request({\n            method: \"DELETE\",\n            path: \"/_api/query/slow\",\n        }, () => undefined);\n    }\n    /**\n     * Kills a running query with the given `queryId`.\n     *\n     * See also {@link Database#listRunningQueries}.\n     *\n     * @param queryId - The ID of a currently running query.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const queries = await db.listRunningQueries();\n     * await Promise.all(queries.map(\n     *   async (query) => {\n     *     if (query.state === \"executing\") {\n     *       await db.killQuery(query.id);\n     *     }\n     *   }\n     * ));\n     * ```\n     */\n    killQuery(queryId) {\n        return this.request({\n            method: \"DELETE\",\n            path: `/_api/query/${encodeURIComponent(queryId)}`,\n        }, () => undefined);\n    }\n    //#endregion\n    //#region functions\n    /**\n     * Fetches a list of all AQL user functions registered with the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const functions = await db.listFunctions();\n     * const names = functions.map(fn => fn.name);\n     * ```\n     */\n    listFunctions() {\n        return this.request({ path: \"/_api/aqlfunction\" }, (res) => res.body.result);\n    }\n    /**\n     * Creates an AQL user function with the given _name_ and _code_ if it does\n     * not already exist or replaces it if a function with the same name already\n     * existed.\n     *\n     * @param name - A valid AQL function name. The function name must consist\n     * of at least two alphanumeric identifiers separated with double colons.\n     * @param code - A string evaluating to a JavaScript function (not a\n     * JavaScript function object).\n     * @param isDeterministic - If set to `true`, the function is expected to\n     * always return the same result for equivalent inputs. This option currently\n     * has no effect but may allow for optimizations in the future.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.createFunction(\n     *   \"ACME::ACCOUNTING::CALCULATE_VAT\",\n     *   \"(price) => price * 0.19\"\n     * );\n     * // Use the new function in an AQL query with template handler:\n     * const cursor = await db.query(aql`\n     *   FOR product IN products\n     *   RETURN MERGE(\n     *     { vat: ACME::ACCOUNTING::CALCULATE_VAT(product.price) },\n     *     product\n     *   )\n     * `);\n     * // cursor is a cursor for the query result\n     * ```\n     */\n    createFunction(name, code, isDeterministic = false) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/aqlfunction\",\n            body: { name, code, isDeterministic },\n        });\n    }\n    /**\n     * Deletes the AQL user function with the given name from the database.\n     *\n     * @param name - The name of the user function to drop.\n     * @param group - If set to `true`, all functions with a name starting with\n     * `name` will be deleted, otherwise only the function with the exact name\n     * will be deleted.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.dropFunction(\"ACME::ACCOUNTING::CALCULATE_VAT\");\n     * // the function no longer exists\n     * ```\n     */\n    dropFunction(name, group = false) {\n        return this.request({\n            method: \"DELETE\",\n            path: `/_api/aqlfunction/${encodeURIComponent(name)}`,\n            qs: { group },\n        });\n    }\n    //#endregion\n    //#region services\n    /**\n     * Fetches a list of all installed service.\n     *\n     * @param excludeSystem - Whether system services should be excluded.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const services = await db.listServices();\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const services = await db.listServices(false); // all services\n     * ```\n     */\n    listServices(excludeSystem = true) {\n        return this.request({\n            path: \"/_api/foxx\",\n            qs: { excludeSystem },\n        });\n    }\n    /**\n     * Installs a new service.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param source - The service bundle to install.\n     * @param options - Options for installing the service.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js file stream as source\n     * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n     * const info = await db.installService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js Buffer as source\n     * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n     * const info = await db.installService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a File (Blob) from a browser file input\n     * const element = document.getElementById(\"my-file-input\");\n     * const source = element.files[0];\n     * const info = await db.installService(\"/hello\", source);\n     * ```\n     */\n    async installService(mount, source, options = {}) {\n        const { configuration, dependencies, ...qs } = options;\n        const req = await (0, multipart_1.toForm)({\n            configuration,\n            dependencies,\n            source,\n        });\n        return await this.request({\n            ...req,\n            method: \"POST\",\n            path: \"/_api/foxx\",\n            isBinary: true,\n            qs: { ...qs, mount },\n        });\n    }\n    /**\n     * Replaces an existing service with a new service by completely removing the\n     * old service and installing a new service at the same mount point.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param source - The service bundle to install.\n     * @param options - Options for replacing the service.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js file stream as source\n     * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n     * const info = await db.replaceService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js Buffer as source\n     * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n     * const info = await db.replaceService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a File (Blob) from a browser file input\n     * const element = document.getElementById(\"my-file-input\");\n     * const source = element.files[0];\n     * const info = await db.replaceService(\"/hello\", source);\n     * ```\n     */\n    async replaceService(mount, source, options = {}) {\n        const { configuration, dependencies, ...qs } = options;\n        const req = await (0, multipart_1.toForm)({\n            configuration,\n            dependencies,\n            source,\n        });\n        return await this.request({\n            ...req,\n            method: \"PUT\",\n            path: \"/_api/foxx/service\",\n            isBinary: true,\n            qs: { ...qs, mount },\n        });\n    }\n    /**\n     * Replaces an existing service with a new service while retaining the old\n     * service's configuration and dependencies.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param source - The service bundle to install.\n     * @param options - Options for upgrading the service.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js file stream as source\n     * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n     * const info = await db.upgradeService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js Buffer as source\n     * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n     * const info = await db.upgradeService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a File (Blob) from a browser file input\n     * const element = document.getElementById(\"my-file-input\");\n     * const source = element.files[0];\n     * const info = await db.upgradeService(\"/hello\", source);\n     * ```\n     */\n    async upgradeService(mount, source, options = {}) {\n        const { configuration, dependencies, ...qs } = options;\n        const req = await (0, multipart_1.toForm)({\n            configuration,\n            dependencies,\n            source,\n        });\n        return await this.request({\n            ...req,\n            method: \"PATCH\",\n            path: \"/_api/foxx/service\",\n            isBinary: true,\n            qs: { ...qs, mount },\n        });\n    }\n    /**\n     * Completely removes a service from the database.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param options - Options for uninstalling the service.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.uninstallService(\"/my-foxx\");\n     * ```\n     */\n    uninstallService(mount, options) {\n        return this.request({\n            method: \"DELETE\",\n            path: \"/_api/foxx/service\",\n            qs: { ...options, mount },\n        }, () => undefined);\n    }\n    /**\n     * Retrieves information about a mounted service.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const info = await db.getService(\"/my-service\");\n     * // info contains detailed information about the service\n     * ```\n     */\n    getService(mount) {\n        return this.request({\n            path: \"/_api/foxx/service\",\n            qs: { mount },\n        });\n    }\n    getServiceConfiguration(mount, minimal = false) {\n        return this.request({\n            path: \"/_api/foxx/configuration\",\n            qs: { mount, minimal },\n        });\n    }\n    replaceServiceConfiguration(mount, cfg, minimal = false) {\n        return this.request({\n            method: \"PUT\",\n            path: \"/_api/foxx/configuration\",\n            body: cfg,\n            qs: { mount, minimal },\n        });\n    }\n    updateServiceConfiguration(mount, cfg, minimal = false) {\n        return this.request({\n            method: \"PATCH\",\n            path: \"/_api/foxx/configuration\",\n            body: cfg,\n            qs: { mount, minimal },\n        });\n    }\n    getServiceDependencies(mount, minimal = false) {\n        return this.request({\n            path: \"/_api/foxx/dependencies\",\n            qs: { mount, minimal },\n        });\n    }\n    replaceServiceDependencies(mount, deps, minimal = false) {\n        return this.request({\n            method: \"PUT\",\n            path: \"/_api/foxx/dependencies\",\n            body: deps,\n            qs: { mount, minimal },\n        });\n    }\n    updateServiceDependencies(mount, deps, minimal = false) {\n        return this.request({\n            method: \"PATCH\",\n            path: \"/_api/foxx/dependencies\",\n            body: deps,\n            qs: { mount, minimal },\n        });\n    }\n    /**\n     * Enables or disables development mode for the given service.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param enabled - Whether development mode should be enabled or disabled.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setServiceDevelopmentMode(\"/my-service\", true);\n     * // the service is now in development mode\n     * await db.setServiceDevelopmentMode(\"/my-service\", false);\n     * // the service is now in production mode\n     * ```\n     */\n    setServiceDevelopmentMode(mount, enabled = true) {\n        return this.request({\n            method: enabled ? \"POST\" : \"DELETE\",\n            path: \"/_api/foxx/development\",\n            qs: { mount },\n        });\n    }\n    /**\n     * Retrieves a list of scripts defined in the service manifest's \"scripts\"\n     * section mapped to their human readable representations.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const scripts = await db.listServiceScripts(\"/my-service\");\n     * for (const [name, title] of Object.entries(scripts)) {\n     *   console.log(`${name}: ${title}`);\n     * }\n     * ```\n     */\n    listServiceScripts(mount) {\n        return this.request({\n            path: \"/_api/foxx/scripts\",\n            qs: { mount },\n        });\n    }\n    /**\n     * Executes a service script and retrieves its result exposed as\n     * `module.exports` (if any).\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param name - Name of the service script to execute as defined in the\n     * service manifest.\n     * @param params - Arbitrary value that will be exposed to the script as\n     * `argv[0]` in the service context (e.g. `module.context.argv[0]`).\n     * Must be serializable to JSON.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const result = await db.runServiceScript(\n     *   \"/my-service\",\n     *   \"create-user\",\n     *   {\n     *     username: \"service_admin\",\n     *     password: \"hunter2\"\n     *   }\n     * );\n     * ```\n     */\n    runServiceScript(mount, name, params) {\n        return this.request({\n            method: \"POST\",\n            path: `/_api/foxx/scripts/${encodeURIComponent(name)}`,\n            body: params,\n            qs: { mount },\n        });\n    }\n    runServiceTests(mount, options) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/foxx/tests\",\n            qs: {\n                ...options,\n                mount,\n            },\n        });\n    }\n    /**\n     * Retrieves the text content of the service's `README` or `README.md` file.\n     *\n     * Returns `undefined` if no such file could be found.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const readme = await db.getServiceReadme(\"/my-service\");\n     * if (readme !== undefined) console.log(readme);\n     * else console.warn(`No README found.`)\n     * ```\n     */\n    getServiceReadme(mount) {\n        return this.request({\n            path: \"/_api/foxx/readme\",\n            qs: { mount },\n        });\n    }\n    /**\n     * Retrieves an Open API compatible Swagger API description object for the\n     * service installed at the given mount point.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const spec = await db.getServiceDocumentation(\"/my-service\");\n     * // spec is a Swagger API description of the service\n     * ```\n     */\n    getServiceDocumentation(mount) {\n        return this.request({\n            path: \"/_api/foxx/swagger\",\n            qs: { mount },\n        });\n    }\n    /**\n     * Retrieves a zip bundle containing the service files.\n     *\n     * Returns a `Buffer` in node.js or `Blob` in the browser.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const serviceBundle = await db.downloadService(\"/my-foxx\");\n     * ```\n     */\n    downloadService(mount) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/foxx/download\",\n            qs: { mount },\n            expectBinary: true,\n        });\n    }\n    /**\n     * Writes all locally available services to the database and updates any\n     * service bundles missing in the database.\n     *\n     * @param replace - If set to `true`, outdated services will also be\n     * committed. This can be used to solve some consistency problems when\n     * service bundles are missing in the database or were deleted manually.\n     *\n     * @example\n     * ```js\n     * await db.commitLocalServiceState();\n     * // all services available on the coordinator have been written to the db\n     * ```\n     *\n     * @example\n     * ```js\n     * await db.commitLocalServiceState(true);\n     * // all service conflicts have been resolved in favor of this coordinator\n     * ```\n     */\n    commitLocalServiceState(replace = false) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/foxx/commit\",\n            qs: { replace },\n        }, () => undefined);\n    }\n}\nexports.Database = Database;\n//# sourceMappingURL=database.js.map","\"use strict\";\n/**\n * ```ts\n * import type { Document, Edge } from \"arangojs/documents\";\n * ```\n *\n * The \"documents\" module provides document/edge related types for TypeScript.\n *\n * @packageDocumentation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._documentHandle = void 0;\n/**\n * @internal\n */\nfunction _documentHandle(selector, collectionName, strict = true) {\n    if (typeof selector !== \"string\") {\n        if (selector._id) {\n            return _documentHandle(selector._id, collectionName);\n        }\n        if (selector._key) {\n            return _documentHandle(selector._key, collectionName);\n        }\n        throw new Error(\"Document handle must be a string or an object with a _key or _id attribute\");\n    }\n    if (selector.includes(\"/\")) {\n        const [head, ...tail] = selector.split(\"/\");\n        const normalizedHead = head.normalize(\"NFC\");\n        if (strict && normalizedHead !== collectionName) {\n            throw new Error(`Document ID \"${selector}\" does not match collection name \"${collectionName}\"`);\n        }\n        return [normalizedHead, ...tail].join(\"/\");\n    }\n    return `${collectionName}/${selector}`;\n}\nexports._documentHandle = _documentHandle;\n//# sourceMappingURL=documents.js.map","\"use strict\";\n/**\n * ```ts\n * import type { ArangoError, HttpError } from \"arangojs/error\";\n * ```\n *\n * The \"error\" module provides types and interfaces for TypeScript related\n * to arangojs error handling.\n *\n * @packageDocumentation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpError = exports.ArangoError = exports.isSystemError = exports.isArangoErrorResponse = exports.isArangoError = void 0;\nconst messages = {\n    0: \"Network Error\",\n    304: \"Not Modified\",\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    402: \"Payment Required\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    405: \"Method Not Allowed\",\n    406: \"Not Acceptable\",\n    407: \"Proxy Authentication Required\",\n    408: \"Request Timeout\",\n    409: \"Conflict\",\n    410: \"Gone\",\n    411: \"Length Required\",\n    412: \"Precondition Failed\",\n    413: \"Payload Too Large\",\n    414: \"Request-URI Too Long\",\n    415: \"Unsupported Media Type\",\n    416: \"Requested Range Not Satisfiable\",\n    417: \"Expectation Failed\",\n    418: \"I'm a teapot\",\n    421: \"Misdirected Request\",\n    422: \"Unprocessable Entity\",\n    423: \"Locked\",\n    424: \"Failed Dependency\",\n    426: \"Upgrade Required\",\n    428: \"Precondition Required\",\n    429: \"Too Many Requests\",\n    431: \"Request Header Fields Too Large\",\n    444: \"Connection Closed Without Response\",\n    451: \"Unavailable For Legal Reasons\",\n    499: \"Client Closed Request\",\n    500: \"Internal Server Error\",\n    501: \"Not Implemented\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    504: \"Gateway Timeout\",\n    505: \"HTTP Version Not Supported\",\n    506: \"Variant Also Negotiates\",\n    507: \"Insufficient Storage\",\n    508: \"Loop Detected\",\n    510: \"Not Extended\",\n    511: \"Network Authentication Required\",\n    599: \"Network Connect Timeout Error\",\n};\nconst nativeErrorKeys = [\n    \"fileName\",\n    \"lineNumber\",\n    \"columnNumber\",\n    \"stack\",\n    \"description\",\n    \"number\",\n];\n/**\n * Indicates whether the given value represents an {@link ArangoError}.\n *\n * @param error - A value that might be an `ArangoError`.\n */\nfunction isArangoError(error) {\n    return Boolean(error && error.isArangoError);\n}\nexports.isArangoError = isArangoError;\n/**\n * Indicates whether the given value represents an ArangoDB error response.\n *\n * @internal\n */\nfunction isArangoErrorResponse(body) {\n    return (body &&\n        body.hasOwnProperty(\"error\") &&\n        body.hasOwnProperty(\"code\") &&\n        body.hasOwnProperty(\"errorMessage\") &&\n        body.hasOwnProperty(\"errorNum\"));\n}\nexports.isArangoErrorResponse = isArangoErrorResponse;\n/**\n * Indicates whether the given value represents a Node.js `SystemError`.\n */\nfunction isSystemError(err) {\n    return (Object.getPrototypeOf(err) === Error.prototype &&\n        err.hasOwnProperty(\"code\") &&\n        err.hasOwnProperty(\"errno\") &&\n        err.hasOwnProperty(\"syscall\"));\n}\nexports.isSystemError = isSystemError;\n/**\n * Represents an error returned by ArangoDB.\n */\nclass ArangoError extends Error {\n    /**\n     * @internal\n     */\n    constructor(response) {\n        super();\n        this.name = \"ArangoError\";\n        this.response = response;\n        this.message = response.body.errorMessage;\n        this.errorNum = response.body.errorNum;\n        this.code = response.body.code;\n        const err = new Error(this.message);\n        err.name = this.name;\n        for (const key of nativeErrorKeys) {\n            if (err[key])\n                this[key] = err[key];\n        }\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB error.\n     */\n    get isArangoError() {\n        return true;\n    }\n    toJSON() {\n        return {\n            error: true,\n            errorMessage: this.message,\n            errorNum: this.errorNum,\n            code: this.code,\n        };\n    }\n}\nexports.ArangoError = ArangoError;\n/**\n * Represents a plain HTTP error response.\n */\nclass HttpError extends Error {\n    /**\n     * @internal\n     */\n    constructor(response) {\n        super();\n        this.name = \"HttpError\";\n        this.response = response;\n        this.code = response.statusCode || 500;\n        this.message = messages[this.code] || messages[500];\n        const err = new Error(this.message);\n        err.name = this.name;\n        for (const key of nativeErrorKeys) {\n            if (err[key])\n                this[key] = err[key];\n        }\n    }\n    toJSON() {\n        return {\n            error: true,\n            code: this.code,\n        };\n    }\n}\nexports.HttpError = HttpError;\n//# sourceMappingURL=error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Graph = exports.GraphEdgeCollection = exports.GraphVertexCollection = exports.isArangoGraph = void 0;\n/**\n * ```ts\n * import type {\n *   Graph,\n *   GraphVertexCollection,\n *   GraphEdgeCollection,\n * } from \"arangojs/graph\";\n * ```\n *\n * The \"graph\" module provides graph related types and interfaces\n * for TypeScript.\n *\n * @packageDocumentation\n */\nconst collection_1 = require(\"./collection\");\nconst documents_1 = require(\"./documents\");\nconst error_1 = require(\"./error\");\nconst codes_1 = require(\"./lib/codes\");\n/**\n * Indicates whether the given value represents a {@link graph.Graph}.\n *\n * @param graph - A value that might be a Graph.\n */\nfunction isArangoGraph(graph) {\n    return Boolean(graph && graph.isArangoGraph);\n}\nexports.isArangoGraph = isArangoGraph;\n/**\n * @internal\n */\nfunction mungeGharialResponse(body, prop) {\n    const { new: newDoc, old: oldDoc, [prop]: doc, ...meta } = body;\n    const result = { ...meta, ...doc };\n    if (typeof newDoc !== \"undefined\")\n        result.new = newDoc;\n    if (typeof oldDoc !== \"undefined\")\n        result.old = oldDoc;\n    return result;\n}\n/**\n * @internal\n */\nfunction coerceEdgeDefinition(options) {\n    const edgeDefinition = {};\n    edgeDefinition.collection = (0, collection_1.collectionToString)(options.collection);\n    edgeDefinition.from = Array.isArray(options.from)\n        ? options.from.map(collection_1.collectionToString)\n        : [(0, collection_1.collectionToString)(options.from)];\n    edgeDefinition.to = Array.isArray(options.to)\n        ? options.to.map(collection_1.collectionToString)\n        : [(0, collection_1.collectionToString)(options.to)];\n    return edgeDefinition;\n}\n/**\n * Represents a {@link collection.DocumentCollection} of vertices in a {@link graph.Graph}.\n *\n * @param T - Type to use for document data. Defaults to `any`.\n */\nclass GraphVertexCollection {\n    /**\n     * @internal\n     */\n    constructor(db, name, graph) {\n        this._db = db;\n        this._collection = db.collection(name);\n        this._name = this._collection.name;\n        this._graph = graph;\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB collection.\n     */\n    get isArangoCollection() {\n        return true;\n    }\n    /**\n     * Name of the collection.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * A {@link collection.DocumentCollection} instance for this vertex collection.\n     */\n    get collection() {\n        return this._collection;\n    }\n    /**\n     * The {@link graph.Graph} instance this vertex collection is bound to.\n     */\n    get graph() {\n        return this._graph;\n    }\n    /**\n     * Checks whether a vertex matching the given key or id exists in this\n     * collection.\n     *\n     * Throws an exception when passed a vertex or `_id` from a different\n     * collection.\n     *\n     * @param selector - Document `_key`, `_id` or object with either of those\n     * properties (e.g. a vertex from this collection).\n     *\n     * @example\n     * ```js\n     * const graph = db.graph(\"some-graph\");\n     * const collection = graph.vertexCollection(\"vertices\");\n     * const exists = await collection.vertexExists(\"abc123\");\n     * if (!exists) {\n     *   console.log(\"Vertex does not exist\");\n     * }\n     * ```\n     */\n    async vertexExists(selector) {\n        try {\n            return await this._db.request({\n                method: \"HEAD\",\n                path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            }, () => true);\n        }\n        catch (err) {\n            if (err.code === 404) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    async vertex(selector, options = {}) {\n        if (typeof options === \"boolean\") {\n            options = { graceful: options };\n        }\n        const { allowDirtyRead = undefined, graceful = false, rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        const result = this._db.request({\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            headers,\n            qs,\n            allowDirtyRead,\n        }, (res) => res.body.vertex);\n        if (!graceful)\n            return result;\n        try {\n            return await result;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.DOCUMENT_NOT_FOUND) {\n                return null;\n            }\n            throw err;\n        }\n    }\n    save(data, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURIComponent(this._name)}`,\n            body: data,\n            qs: options,\n        }, (res) => mungeGharialResponse(res.body, \"vertex\"));\n    }\n    replace(selector, newValue, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const { rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            body: newValue,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"vertex\"));\n    }\n    update(selector, newValue, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const headers = {};\n        const { rev, ...qs } = options;\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            body: newValue,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"vertex\"));\n    }\n    remove(selector, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const headers = {};\n        const { rev, ...qs } = options;\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"removed\"));\n    }\n}\nexports.GraphVertexCollection = GraphVertexCollection;\n/**\n * Represents a {@link collection.EdgeCollection} of edges in a {@link graph.Graph}.\n *\n * @param T - Type to use for document data. Defaults to `any`.\n */\nclass GraphEdgeCollection {\n    /**\n     * @internal\n     */\n    constructor(db, name, graph) {\n        this._db = db;\n        this._collection = db.collection(name);\n        this._name = this._collection.name;\n        this._graph = graph;\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB collection.\n     */\n    get isArangoCollection() {\n        return true;\n    }\n    /**\n     * Name of the collection.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * A {@link collection.EdgeCollection} instance for this edge collection.\n     */\n    get collection() {\n        return this._collection;\n    }\n    /**\n     * The {@link graph.Graph} instance this edge collection is bound to.\n     */\n    get graph() {\n        return this._graph;\n    }\n    /**\n     * Checks whether a edge matching the given key or id exists in this\n     * collection.\n     *\n     * Throws an exception when passed a edge or `_id` from a different\n     * collection.\n     *\n     * @param selector - Document `_key`, `_id` or object with either of those\n     * properties (e.g. a edge from this collection).\n     *\n     * @example\n     * ```js\n     * const graph = db.graph(\"some-graph\");\n     * const collection = graph.edgeCollection(\"friends\")\n     * const exists = await collection.edgeExists(\"abc123\");\n     * if (!exists) {\n     *   console.log(\"Edge does not exist\");\n     * }\n     * ```\n     */\n    async edgeExists(selector) {\n        try {\n            return await this._db.request({\n                method: \"HEAD\",\n                path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            }, () => true);\n        }\n        catch (err) {\n            if (err.code === 404) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    async edge(selector, options = {}) {\n        if (typeof options === \"boolean\") {\n            options = { graceful: options };\n        }\n        const { allowDirtyRead = undefined, graceful = false, rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        const result = this._db.request({\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            qs,\n            allowDirtyRead,\n        }, (res) => res.body.edge);\n        if (!graceful)\n            return result;\n        try {\n            return await result;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.DOCUMENT_NOT_FOUND) {\n                return null;\n            }\n            throw err;\n        }\n    }\n    save(data, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURIComponent(this._name)}`,\n            body: data,\n            qs: options,\n        }, (res) => mungeGharialResponse(res.body, \"edge\"));\n    }\n    replace(selector, newValue, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const { rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            body: newValue,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"edge\"));\n    }\n    update(selector, newValue, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const { rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            body: newValue,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"edge\"));\n    }\n    remove(selector, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const { rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI((0, documents_1._documentHandle)(selector, this._name))}`,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"removed\"));\n    }\n}\nexports.GraphEdgeCollection = GraphEdgeCollection;\n/**\n * Represents a graph in a {@link database.Database}.\n */\nclass Graph {\n    /**\n     * @internal\n     */\n    constructor(db, name) {\n        this._name = name.normalize(\"NFC\");\n        this._db = db;\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB Graph.\n     */\n    get isArangoGraph() {\n        return true;\n    }\n    /**\n     * Name of the graph.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Checks whether the graph exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const result = await graph.exists();\n     * // result indicates whether the graph exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.GRAPH_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Retrieves general information about the graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const data = await graph.get();\n     * // data contains general information about the graph\n     * ```\n     */\n    get() {\n        return this._db.request({ path: `/_api/gharial/${encodeURIComponent(this._name)}` }, (res) => res.body.graph);\n    }\n    /**\n     * Creates a graph with the given `edgeDefinitions` and `options` for this\n     * graph's name.\n     *\n     * @param edgeDefinitions - Definitions for the relations of the graph.\n     * @param options - Options for creating the graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * // graph now exists\n     * ```\n     */\n    create(edgeDefinitions, options = {}) {\n        const { orphanCollections, satellites, waitForSync, isSmart, isDisjoint, ...opts } = options;\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/gharial\",\n            body: {\n                orphanCollections: orphanCollections &&\n                    (Array.isArray(orphanCollections)\n                        ? orphanCollections.map(collection_1.collectionToString)\n                        : [(0, collection_1.collectionToString)(orphanCollections)]),\n                edgeDefinitions: edgeDefinitions.map(coerceEdgeDefinition),\n                isSmart,\n                isDisjoint,\n                name: this._name,\n                options: { ...opts, satellites: satellites?.map(collection_1.collectionToString) },\n            },\n            qs: { waitForSync },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Deletes the graph from the database.\n     *\n     * @param dropCollections - If set to `true`, the collections associated with\n     * the graph will also be deleted.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * await graph.drop();\n     * // the graph \"some-graph\" no longer exists\n     * ```\n     */\n    drop(dropCollections = false) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}`,\n            qs: { dropCollections },\n        }, (res) => res.body.removed);\n    }\n    /**\n     * Returns a {@link graph.GraphVertexCollection} instance for the given collection\n     * name representing the collection in this graph.\n     *\n     * @param T - Type to use for document data. Defaults to `any`.\n     * @param collection - Name of the vertex collection.\n     */\n    vertexCollection(collection) {\n        return new GraphVertexCollection(this._db, (0, collection_1.collectionToString)(collection), this);\n    }\n    /**\n     * Fetches all vertex collections of this graph from the database and returns\n     * an array of their names.\n     *\n     * See also {@link graph.Graph#vertexCollections}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const vertexCollectionNames = await graph.listVertexCollections();\n     * // [\"start-vertices\", \"end-vertices\"]\n     * ```\n     */\n    listVertexCollections() {\n        return this._db.request({ path: `/_api/gharial/${encodeURIComponent(this._name)}/vertex` }, (res) => res.body.collections);\n    }\n    /**\n     * Fetches all vertex collections of this graph from the database and returns\n     * an array of {@link graph.GraphVertexCollection} instances.\n     *\n     * See also {@link graph.Graph#listVertexCollections}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const vertexCollections = await graph.vertexCollections();\n     * for (const vertexCollection of vertexCollections) {\n     *   console.log(vertexCollection.name);\n     *   // \"start-vertices\"\n     *   // \"end-vertices\"\n     * }\n     * ```\n     */\n    async vertexCollections() {\n        const names = await this.listVertexCollections();\n        return names.map((name) => new GraphVertexCollection(this._db, name, this));\n    }\n    /**\n     * Adds the given collection to this graph as a vertex collection.\n     *\n     * @param collection - Collection to add to the graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * await graph.addVertexCollection(\"more-vertices\");\n     * // The collection \"more-vertices\" has been added to the graph\n     * const extra = db.collection(\"extra-vertices\");\n     * await graph.addVertexCollection(extra);\n     * // The collection \"extra-vertices\" has been added to the graph\n     * ```\n     */\n    addVertexCollection(collection, options = {}) {\n        const { satellites, ...opts } = options;\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/vertex`,\n            body: {\n                collection: (0, collection_1.collectionToString)(collection),\n                options: { ...opts, satellites: satellites?.map(collection_1.collectionToString) },\n            },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Removes the given collection from this graph as a vertex collection.\n     *\n     * @param collection - Collection to remove from the graph.\n     * @param dropCollection - If set to `true`, the collection will also be\n     * deleted from the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * await graph.removeVertexCollection(\"start-vertices\");\n     * // The collection \"start-vertices\" is no longer part of the graph.\n     * ```\n     */\n    removeVertexCollection(collection, dropCollection = false) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/vertex/${encodeURIComponent((0, collection_1.collectionToString)(collection))}`,\n            qs: {\n                dropCollection,\n            },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Returns a {@link graph.GraphEdgeCollection} instance for the given collection\n     * name representing the collection in this graph.\n     *\n     * @param T - Type to use for document data. Defaults to `any`.\n     * @param collection - Name of the edge collection.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const graphEdgeCollection = graph.edgeCollection(\"edges\");\n     * // Access the underlying EdgeCollection API:\n     * const edgeCollection = graphEdgeCollection.collection;\n     * ```\n     */\n    edgeCollection(collection) {\n        return new GraphEdgeCollection(this._db, (0, collection_1.collectionToString)(collection), this);\n    }\n    /**\n     * Fetches all edge collections of this graph from the database and returns\n     * an array of their names.\n     *\n     * See also {@link graph.Graph#edgeCollections}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const edgeCollectionNames = await graph.listEdgeCollections();\n     * // [\"edges\"]\n     * ```\n     */\n    listEdgeCollections() {\n        return this._db.request({ path: `/_api/gharial/${encodeURIComponent(this._name)}/edge` }, (res) => res.body.collections);\n    }\n    /**\n     * Fetches all edge collections of this graph from the database and returns\n     * an array of {@link graph.GraphEdgeCollection} instances.\n     *\n     * See also {@link graph.Graph#listEdgeCollections}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const graphEdgeCollections = await graph.edgeCollections();\n     * for (const collection of graphEdgeCollection) {\n     *   console.log(collection.name);\n     *   // \"edges\"\n     * }\n     * ```\n     */\n    async edgeCollections() {\n        const names = await this.listEdgeCollections();\n        return names.map((name) => new GraphEdgeCollection(this._db, name, this));\n    }\n    /**\n     * Adds an edge definition to this graph.\n     *\n     * @param edgeDefinition - Definition of a relation in this graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * await graph.addEdgeDefinition({\n     *   collection: \"edges\",\n     *   from: [\"start-vertices\"],\n     *   to: [\"end-vertices\"],\n     * });\n     * // The edge definition has been added to the graph\n     * ```\n     */\n    addEdgeDefinition(edgeDefinition, options = {}) {\n        const { satellites, ...opts } = options;\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/edge`,\n            body: {\n                ...coerceEdgeDefinition(edgeDefinition),\n                options: { ...opts, satellites: satellites?.map(collection_1.collectionToString) },\n            },\n        }, (res) => res.body.graph);\n    }\n    replaceEdgeDefinition(collectionOrEdgeDefinitionOptions, edgeDefinitionOrOptions, options = {}) {\n        let collection = collectionOrEdgeDefinitionOptions;\n        let edgeDefinition = edgeDefinitionOrOptions;\n        if (edgeDefinitionOrOptions &&\n            !edgeDefinitionOrOptions.hasOwnProperty(\"collection\")) {\n            options = edgeDefinitionOrOptions;\n            edgeDefinitionOrOptions = undefined;\n        }\n        if (!edgeDefinitionOrOptions) {\n            edgeDefinition =\n                collectionOrEdgeDefinitionOptions;\n            collection = edgeDefinition.collection;\n        }\n        const { satellites, ...opts } = options;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/edge/${encodeURIComponent((0, collection_1.collectionToString)(collection))}`,\n            body: {\n                ...coerceEdgeDefinition(edgeDefinition),\n                options: { ...opts, satellites: satellites?.map(collection_1.collectionToString) },\n            },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Removes the edge definition for the given edge collection from this graph.\n     *\n     * @param collection - Edge collection for which to remove the definition.\n     * @param dropCollection - If set to `true`, the collection will also be\n     * deleted from the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * await graph.removeEdgeDefinition(\"edges\");\n     * // The edge definition for \"edges\" has been replaced\n     * ```\n     */\n    removeEdgeDefinition(collection, dropCollection = false) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/edge/${encodeURIComponent((0, collection_1.collectionToString)(collection))}`,\n            qs: {\n                dropCollection,\n            },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Performs a traversal starting from the given `startVertex` and following\n     * edges contained in this graph.\n     *\n     * See also {@link collection.EdgeCollection#traversal}.\n     *\n     * @param startVertex - Document `_id` of a vertex in this graph.\n     * @param options - Options for performing the traversal.\n     *\n     * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n     * replaced with AQL queries.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"my-graph\");\n     * const collection = graph.edgeCollection(\"edges\").collection;\n     * await collection.import([\n     *   [\"_key\", \"_from\", \"_to\"],\n     *   [\"x\", \"vertices/a\", \"vertices/b\"],\n     *   [\"y\", \"vertices/b\", \"vertices/c\"],\n     *   [\"z\", \"vertices/c\", \"vertices/d\"],\n     * ]);\n     * const startVertex = \"vertices/a\";\n     * const cursor = await db.query(aql`\n     *   FOR vertex IN OUTBOUND ${startVertex} GRAPH ${graph}\n     *   RETURN vertex._key\n     * `);\n     * const result = await cursor.all();\n     * console.log(result); // [\"a\", \"b\", \"c\", \"d\"]\n     * ```\n     */\n    traversal(startVertex, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/traversal`,\n            body: {\n                ...options,\n                startVertex,\n                graphName: this._name,\n            },\n        }, (res) => res.body.result);\n    }\n}\nexports.Graph = Graph;\n//# sourceMappingURL=graph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Database = exports.aql = exports.arangojs = void 0;\nconst database_1 = require(\"./database\");\nmodule.exports = exports = arangojs;\nfunction arangojs(config, name) {\n    if (typeof config === \"string\" || Array.isArray(config)) {\n        const url = config;\n        return new database_1.Database(url, name);\n    }\n    return new database_1.Database(config);\n}\nexports.arangojs = arangojs;\nexports.default = arangojs;\nvar aql_1 = require(\"./aql\");\nObject.defineProperty(exports, \"aql\", { enumerable: true, get: function () { return aql_1.aql; } });\nvar database_2 = require(\"./database\");\nObject.defineProperty(exports, \"Database\", { enumerable: true, get: function () { return database_2.Database; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * ```ts\n * import type {\n *   FulltextIndex,\n *   GeoIndex,\n *   PersistentIndex,\n *   PrimaryIndex,\n *   TtlIndex,\n *   ZkdIndex,\n * } from \"arangojs/indexes\";\n * ```\n *\n * The \"indexes\" module provides index-related types for TypeScript.\n *\n * @packageDocumentation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._indexHandle = void 0;\n/**\n * @internal\n */\nfunction _indexHandle(selector, collectionName) {\n    if (typeof selector !== \"string\") {\n        if (selector.id) {\n            return _indexHandle(selector.id, collectionName);\n        }\n        throw new Error(\"Index handle must be a string or an object with an id attribute\");\n    }\n    if (selector.includes(\"/\")) {\n        const [head, ...tail] = selector.split(\"/\");\n        const normalizedHead = head.normalize(\"NFC\");\n        if (normalizedHead !== collectionName) {\n            throw new Error(`Index ID \"${selector}\" does not match collection name \"${collectionName}\"`);\n        }\n        return [normalizedHead, ...tail].join(\"/\");\n    }\n    return `${collectionName}/${selector}`;\n}\nexports._indexHandle = _indexHandle;\n//# sourceMappingURL=indexes.js.map","\"use strict\";\n/**\n * Wrapper around browser `btoa` function to allow substituting a\n * Node.js-specific implementation.\n *\n * @packageDocumentation\n * @internal\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64Encode = void 0;\n/**\n * @internal\n */\nfunction base64Encode(str) {\n    return btoa(str);\n}\nexports.base64Encode = base64Encode;\n//# sourceMappingURL=btoa.web.js.map","\"use strict\";\n/**\n * Error codes handled by arangojs.\n *\n * See also [ArangoDB error documentation](https://www.arangodb.com/docs/stable/appendix-error-codes.html).\n *\n * @packageDocumentation\n * @internal\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GRAPH_NOT_FOUND = exports.DATABASE_NOT_FOUND = exports.VIEW_NOT_FOUND = exports.COLLECTION_NOT_FOUND = exports.DOCUMENT_NOT_FOUND = exports.ANALYZER_NOT_FOUND = exports.ERROR_ARANGO_CONFLICT = exports.ERROR_ARANGO_MAINTENANCE_MODE = exports.TRANSACTION_NOT_FOUND = void 0;\nexports.TRANSACTION_NOT_FOUND = 10;\nexports.ERROR_ARANGO_MAINTENANCE_MODE = 503;\nexports.ERROR_ARANGO_CONFLICT = 1200;\nexports.ANALYZER_NOT_FOUND = 1202;\nexports.DOCUMENT_NOT_FOUND = 1202;\nexports.COLLECTION_NOT_FOUND = 1203;\nexports.VIEW_NOT_FOUND = 1203;\nexports.DATABASE_NOT_FOUND = 1228;\nexports.GRAPH_NOT_FOUND = 1924;\n//# sourceMappingURL=codes.js.map","\"use strict\";\n/**\n * Utility function for constructing a multipart form in the browser.\n *\n * @packageDocumentation\n * @internal\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toForm = void 0;\n/**\n * @internal\n */\nfunction toForm(fields, callback) {\n    let form;\n    try {\n        form = new FormData();\n        for (const key of Object.keys(fields)) {\n            let value = fields[key];\n            if (value === undefined)\n                continue;\n            if (!(value instanceof Blob) &&\n                (typeof value === \"object\" || typeof value === \"function\")) {\n                value = JSON.stringify(value);\n            }\n            form.append(key, value);\n        }\n    }\n    catch (e) {\n        callback(e);\n        return;\n    }\n    callback(null, { body: form });\n}\nexports.toForm = toForm;\n//# sourceMappingURL=multipart.web.js.map","\"use strict\";\n/**\n * Utility function for normalizing URLs.\n *\n * @packageDocumentation\n * @internal\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeUrl = void 0;\n/**\n * @internal\n */\nfunction normalizeUrl(url) {\n    const raw = url.match(/^(tcp|ssl|tls)((?::|\\+).+)/);\n    if (raw)\n        url = (raw[1] === \"tcp\" ? \"http\" : \"https\") + raw[2];\n    const unix = url.match(/^(?:(http|https)\\+)?unix:\\/\\/(\\/.+)/);\n    if (unix)\n        url = `${unix[1] || \"http\"}://unix:${unix[2]}`;\n    return url;\n}\nexports.normalizeUrl = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map","\"use strict\";\n/**\n * Utility function for omitting properties by key.\n *\n * @packageDocumentation\n * @internal\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.omit = void 0;\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction omit(obj, keys) {\n    const result = {};\n    for (const key of Object.keys(obj)) {\n        if (keys.includes(key))\n            continue;\n        result[key] = obj[key];\n    }\n    return result;\n}\nexports.omit = omit;\n//# sourceMappingURL=omit.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.querystringify = void 0;\nconst querystring_1 = require(\"querystring\");\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction clean(obj) {\n    const result = {};\n    for (const key of Object.keys(obj)) {\n        const value = obj[key];\n        if (value === undefined)\n            continue;\n        result[key] = value;\n    }\n    return result;\n}\nfunction querystringify(obj) {\n    return (0, querystring_1.stringify)(clean(obj));\n}\nexports.querystringify = querystringify;\n//# sourceMappingURL=querystringify.js.map","\"use strict\";\n/// <reference lib=\"dom\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createRequest = exports.isBrowser = void 0;\nconst btoa_1 = require(\"./btoa\");\nconst omit_1 = require(\"./omit\");\nconst xhr_1 = require(\"./xhr\");\nexports.isBrowser = true;\n/**\n * @internal\n */\nfunction errorToJSON() {\n    return {\n        error: true,\n        message: this.message,\n    };\n}\n/**\n * Create a function for performing requests against a given host.\n *\n * @param baseUrl - Base URL of the host, i.e. protocol, port and domain name.\n * @param agentOptions - Options to use for performing requests.\n *\n * @param baseUrl\n * @param agentOptions\n *\n * @internal\n */\nfunction createRequest(baseUrl, agentOptions) {\n    const base = new URL(baseUrl);\n    const auth = (0, btoa_1.base64Encode)(`${base.username || \"root\"}:${base.password}`);\n    base.username = \"\";\n    base.password = \"\";\n    const options = (0, omit_1.omit)(agentOptions, [\"maxSockets\"]);\n    return function request({ method, url: reqUrl, headers, body, timeout, expectBinary, }, cb) {\n        const url = new URL(reqUrl.pathname, base);\n        if (base.search || reqUrl.search) {\n            url.search = reqUrl.search\n                ? `${base.search}&${reqUrl.search.slice(1)}`\n                : base.search;\n        }\n        if (!headers[\"authorization\"]) {\n            headers[\"authorization\"] = `Basic ${auth}`;\n        }\n        let callback = (err, res) => {\n            callback = () => undefined;\n            cb(err, res);\n        };\n        const req = (0, xhr_1.default)({\n            useXDR: true,\n            withCredentials: true,\n            ...options,\n            responseType: expectBinary ? \"blob\" : \"text\",\n            url: String(url),\n            body,\n            method,\n            headers,\n            timeout,\n        }, (err, res) => {\n            if (!err) {\n                const response = res;\n                response.request = req;\n                if (!response.body)\n                    response.body = \"\";\n                if (options.after) {\n                    options.after(null, response);\n                }\n                callback(null, response);\n            }\n            else {\n                const error = err;\n                error.request = req;\n                error.toJSON = errorToJSON;\n                if (options.after) {\n                    options.after(error);\n                }\n                callback(error);\n            }\n        });\n        if (options.before) {\n            options.before(req);\n        }\n    };\n}\nexports.createRequest = createRequest;\n//# sourceMappingURL=request.web.js.map","\"use strict\";\n/**\n * Wrapper around the `xhr` module for HTTP(S) requests in the browser.\n *\n * @packageDocumentation\n * @internal\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nexports.default = require(\"xhr\");\n//# sourceMappingURL=xhr.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Route = void 0;\n/**\n * Represents an arbitrary route relative to an ArangoDB database.\n */\nclass Route {\n    /**\n     * @internal\n     */\n    constructor(db, path = \"\", headers = {}) {\n        if (!path)\n            path = \"\";\n        else if (path.charAt(0) !== \"/\")\n            path = `/${path}`;\n        this._db = db;\n        this._path = path;\n        this._headers = headers;\n    }\n    /**\n     * Creates a new route relative to this route that inherits any of its default\n     * HTTP headers.\n     *\n     * @param path - Path relative to this route.\n     * @param headers - Additional headers that will be sent with each request.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const foxx = db.route(\"/my-foxx-service\");\n     * const users = foxx.route(\"/users\");\n     * ```\n     */\n    route(path, headers) {\n        if (!path)\n            path = \"\";\n        else if (path.charAt(0) !== \"/\")\n            path = `/${path}`;\n        return new Route(this._db, this._path + path, {\n            ...this._headers,\n            ...headers,\n        });\n    }\n    /**\n     * Performs an arbitrary HTTP request relative to this route and returns the\n     * server response.\n     *\n     * @param options - Options for performing the request.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const foxx = db.route(\"/my-foxx-service\");\n     * const res = await foxx.request({\n     *   method: \"POST\",\n     *   path: \"/users\",\n     *   body: {\n     *     username: \"admin\",\n     *     password: \"hunter2\"\n     *   }\n     * });\n     * ```\n     */\n    request(options) {\n        const opts = { ...options };\n        if (!opts.path || opts.path === \"/\")\n            opts.path = \"\";\n        else if (!this._path || opts.path.charAt(0) === \"/\")\n            opts.path = opts.path;\n        else\n            opts.path = `/${opts.path}`;\n        opts.basePath = this._path;\n        opts.headers = { ...this._headers, ...opts.headers };\n        opts.method = opts.method ? opts.method.toUpperCase() : \"GET\";\n        return this._db.request(opts, false);\n    }\n    delete(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [qs, headers] = args;\n        return this.request({ method: \"DELETE\", path, qs, headers });\n    }\n    get(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [qs, headers] = args;\n        return this.request({ method: \"GET\", path, qs, headers });\n    }\n    head(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [qs, headers] = args;\n        return this.request({ method: \"HEAD\", path, qs, headers });\n    }\n    patch(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [body, qs, headers] = args;\n        return this.request({ method: \"PATCH\", path, body, qs, headers });\n    }\n    post(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [body, qs, headers] = args;\n        return this.request({ method: \"POST\", path, body, qs, headers });\n    }\n    put(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [body, qs, headers] = args;\n        return this.request({ method: \"PUT\", path, body, qs, headers });\n    }\n}\nexports.Route = Route;\n//# sourceMappingURL=route.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = exports.isArangoTransaction = void 0;\nconst error_1 = require(\"./error\");\nconst codes_1 = require(\"./lib/codes\");\n/**\n * Indicates whether the given value represents a {@link Transaction}.\n *\n * @param transaction - A value that might be a transaction.\n */\nfunction isArangoTransaction(transaction) {\n    return Boolean(transaction && transaction.isArangoTransaction);\n}\nexports.isArangoTransaction = isArangoTransaction;\n/**\n * Represents a streaming transaction in a {@link database.Database}.\n */\nclass Transaction {\n    /**\n     * @internal\n     */\n    constructor(db, id) {\n        this._db = db;\n        this._id = id;\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB transaction.\n     */\n    get isArangoTransaction() {\n        return true;\n    }\n    /**\n     * Unique identifier of this transaction.\n     *\n     * See {@link database.Database#transaction}.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Checks whether the transaction exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const trx = db.transaction(\"some-transaction\");\n     * const result = await trx.exists();\n     * // result indicates whether the transaction exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.TRANSACTION_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Retrieves general information about the transaction.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const col = db.collection(\"some-collection\");\n     * const trx = db.beginTransaction(col);\n     * await trx.step(() => col.save({ hello: \"world\" }));\n     * const info = await trx.get();\n     * // the transaction exists\n     * ```\n     */\n    get() {\n        return this._db.request({\n            path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n        }, (res) => res.body.result);\n    }\n    /**\n     * Attempts to commit the transaction to the databases.\n     *\n     * @param options - Options for comitting the transaction.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const col = db.collection(\"some-collection\");\n     * const trx = db.beginTransaction(col);\n     * await trx.step(() => col.save({ hello: \"world\" }));\n     * const result = await trx.commit();\n     * // result indicates the updated transaction status\n     * ```\n     */\n    commit(options = {}) {\n        const { allowDirtyRead = undefined } = options;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n            allowDirtyRead,\n        }, (res) => res.body.result);\n    }\n    /**\n     * Attempts to abort the transaction to the databases.\n     *\n     * @param options - Options for aborting the transaction.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const col = db.collection(\"some-collection\");\n     * const trx = db.beginTransaction(col);\n     * await trx.step(() => col.save({ hello: \"world\" }));\n     * const result = await trx.abort();\n     * // result indicates the updated transaction status\n     * ```\n     */\n    abort(options = {}) {\n        const { allowDirtyRead = undefined } = options;\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n            allowDirtyRead,\n        }, (res) => res.body.result);\n    }\n    /**\n     * Executes the given function locally as a single step of the transaction.\n     *\n     * @param T - Type of the callback's returned promise.\n     * @param callback - Callback function returning a promise.\n     *\n     * **Warning**: The callback function should wrap a single call of an async\n     * arangojs method (e.g. a method on a `Collection` object of a collection\n     * that is involved in the transaction or the `db.query` method).\n     * If the callback function is async, only the first promise-returning (or\n     * async) method call will be executed as part of the transaction. See the\n     * examples below for how to avoid common mistakes when using this method.\n     *\n     * **Note**: Avoid defining the callback as an async function if possible\n     * as arangojs will throw an error if the callback did not return a promise.\n     * Async functions will return an empty promise by default, making it harder\n     * to notice if you forgot to return something from the callback.\n     *\n     * **Note**: Although almost anything can be wrapped in a callback and passed\n     * to this method, that does not guarantee ArangoDB can actually do it in a\n     * transaction. Refer to the ArangoDB documentation if you are unsure whether\n     * a given operation can be executed as part of a transaction. Generally any\n     * modification or retrieval of data is eligible but modifications of\n     * collections or databases are not.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const vertices = db.collection(\"vertices\");\n     * const edges = db.collection(\"edges\");\n     * const trx = await db.beginTransaction({ write: [vertices, edges] });\n     *\n     * // The following code will be part of the transaction\n     * const left = await trx.step(() => vertices.save({ label: \"left\" }));\n     * const right = await trx.step(() => vertices.save({ label: \"right\" }));\n     *\n     * // Results from preceding actions can be used normally\n     * await trx.step(() => edges.save({\n     *   _from: left._id,\n     *   _to: right._id,\n     *   data: \"potato\"\n     * }));\n     *\n     * // Transaction must be committed for changes to take effected\n     * // Always call either trx.commit or trx.abort to end a transaction\n     * await trx.commit();\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! If the callback is an async function it must only use await once!\n     * await trx.step(async () => {\n     *   await collection.save(data);\n     *   await collection.save(moreData); // WRONG\n     * });\n     *\n     * // BAD! Callback function must use only one arangojs call!\n     * await trx.step(() => {\n     *  return collection.save(data)\n     *    .then(() => collection.save(moreData)); // WRONG\n     * });\n     *\n     * // BETTER: Wrap every arangojs method call that should be part of the\n     * // transaction in a separate `trx.step` call\n     * await trx.step(() => collection.save(data));\n     * await trx.step(() => collection.save(moreData));\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! If the callback is an async function it must not await before\n     * // calling an arangojs method!\n     * await trx.step(async () => {\n     *   await doSomethingElse();\n     *   return collection.save(data); // WRONG\n     * });\n     *\n     * // BAD! Any arangojs inside the callback must not happen inside a promise\n     * // method!\n     * await trx.step(() => {\n     *   return doSomethingElse()\n     *     .then(() => collection.save(data)); // WRONG\n     * });\n     *\n     * // BETTER: Perform any async logic needed outside the `trx.step` call\n     * await doSomethingElse();\n     * await trx.step(() => collection.save(data));\n     *\n     * // OKAY: You can perform async logic in the callback after the arangojs\n     * // method call as long as it does not involve additional arangojs method\n     * // calls, but this makes it easy to make mistakes later\n     * await trx.step(async () => {\n     *   await collection.save(data);\n     *   await doSomethingDifferent(); // no arangojs method calls allowed\n     * });\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! The callback should not use any functions that themselves use any\n     * // arangojs methods!\n     * async function saveSomeData() {\n     *   await collection.save(data);\n     *   await collection.save(moreData);\n     * }\n     * await trx.step(() => saveSomeData()); // WRONG\n     *\n     * // BETTER: Pass the transaction to functions that need to call arangojs\n     * // methods inside a transaction\n     * async function saveSomeData(trx) {\n     *   await trx.step(() => collection.save(data));\n     *   await trx.step(() => collection.save(moreData));\n     * }\n     * await saveSomeData(); // no `trx.step` call needed\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! You must wait for the promise to resolve (or await on the\n     * // `trx.step` call) before calling `trx.step` again!\n     * trx.step(() => collection.save(data)); // WRONG\n     * await trx.step(() => collection.save(moreData));\n     *\n     * // BAD! The trx.step callback can not make multiple calls to async arangojs\n     * // methods, not even using Promise.all!\n     * await trx.step(() => Promise.all([ // WRONG\n     *   collection.save(data),\n     *   collection.save(moreData),\n     * ]));\n     *\n     * // BAD! Multiple `trx.step` calls can not run in parallel!\n     * await Promise.all([ // WRONG\n     *   trx.step(() => collection.save(data)),\n     *   trx.step(() => collection.save(moreData)),\n     * ]));\n     *\n     * // BETTER: Always call `trx.step` sequentially, one after the other\n     * await trx.step(() => collection.save(data));\n     * await trx.step(() => collection.save(moreData));\n     *\n     * // OKAY: The then callback can be used if async/await is not available\n     * trx.step(() => collection.save(data))\n     *   .then(() => trx.step(() => collection.save(moreData)));\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! The callback will return an empty promise that resolves before\n     * // the inner arangojs method call has even talked to ArangoDB!\n     * await trx.step(async () => {\n     *   collection.save(data); // WRONG\n     * });\n     *\n     * // BETTER: Use an arrow function so you don't forget to return\n     * await trx.step(() => collection.save(data));\n     *\n     * // OKAY: Remember to always return when using a function body\n     * await trx.step(() => {\n     *   return collection.save(data); // easy to forget!\n     * });\n     *\n     * // OKAY: You do not have to use arrow functions but it helps\n     * await trx.step(function () {\n     *   return collection.save(data);\n     * });\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! You can not pass promises instead of a callback!\n     * await trx.step(collection.save(data)); // WRONG\n     *\n     * // BETTER: Wrap the code in a function and pass the function instead\n     * await trx.step(() => collection.save(data));\n     * ```\n     *\n     * @example\n     * ```js\n     * // WORSE: Calls to non-async arangojs methods don't need to be performed\n     * // as part of a transaction\n     * const collection = await trx.step(() => db.collection(\"my-documents\"));\n     *\n     * // BETTER: If an arangojs method is not async and doesn't return promises,\n     * // call it without `trx.step`\n     * const collection = db.collection(\"my-documents\");\n     * ```\n     */\n    step(callback) {\n        const conn = this._db._connection;\n        conn.setTransactionId(this.id);\n        try {\n            const promise = callback();\n            if (!promise) {\n                throw new Error(\"Transaction callback was not an async function or did not return a promise!\");\n            }\n            return Promise.resolve(promise);\n        }\n        finally {\n            conn.clearTransactionId();\n        }\n    }\n}\nexports.Transaction = Transaction;\n//# sourceMappingURL=transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.View = exports.isArangoView = void 0;\nconst error_1 = require(\"./error\");\nconst codes_1 = require(\"./lib/codes\");\n/**\n * Indicates whether the given value represents a {@link View}.\n *\n * @param view - A value that might be a View.\n */\nfunction isArangoView(view) {\n    return Boolean(view && view.isArangoView);\n}\nexports.isArangoView = isArangoView;\n/**\n * Represents a View in a {@link database.Database}.\n */\nclass View {\n    /**\n     * @internal\n     */\n    constructor(db, name) {\n        this._db = db;\n        this._name = name.normalize(\"NFC\");\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB View.\n     */\n    get isArangoView() {\n        return true;\n    }\n    /**\n     * Name of the View.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Retrieves general information about the View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const data = await view.get();\n     * // data contains general information about the View\n     * ```\n     */\n    get() {\n        return this._db.request({\n            path: `/_api/view/${encodeURIComponent(this._name)}`,\n        });\n    }\n    /**\n     * Checks whether the View exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const exists = await view.exists();\n     * console.log(exists); // indicates whether the View exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if ((0, error_1.isArangoError)(err) && err.errorNum === codes_1.VIEW_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Creates a View with the given `options` and the instance's name.\n     *\n     * See also {@link database.Database#createView}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"potatoes\");\n     * await view.create();\n     * // the ArangoSearch View \"potatoes\" now exists\n     * ```\n     */\n    create(options) {\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/view\",\n            body: {\n                ...options,\n                name: this._name,\n            },\n        });\n    }\n    /**\n     * Renames the View and updates the instance's `name` to `newName`.\n     *\n     * Additionally removes the instance from the {@link database.Database}'s internal\n     * cache.\n     *\n     * **Note**: Renaming Views may not be supported when ArangoDB is\n     * running in a cluster configuration.\n     *\n     * @param newName - The new name of the View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view1 = db.view(\"some-view\");\n     * await view1.rename(\"other-view\");\n     * const view2 = db.view(\"some-view\");\n     * const view3 = db.view(\"other-view\");\n     * // Note all three View instances are different objects but\n     * // view1 and view3 represent the same ArangoDB view!\n     * ```\n     */\n    async rename(newName) {\n        const result = this._db.renameView(this._name, newName);\n        this._name = newName.normalize(\"NFC\");\n        return result;\n    }\n    /**\n     * Retrieves the View's properties.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const data = await view.properties();\n     * // data contains the View's properties\n     * ```\n     */\n    properties() {\n        return this._db.request({\n            path: `/_api/view/${encodeURIComponent(this._name)}/properties`,\n        });\n    }\n    /**\n     * Updates the properties of the View.\n     *\n     * @param properties - Properties of the View to update.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const result = await view.updateProperties({\n     *   consolidationIntervalMsec: 234\n     * });\n     * console.log(result.consolidationIntervalMsec); // 234\n     * ```\n     */\n    updateProperties(properties) {\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/view/${encodeURIComponent(this._name)}/properties`,\n            body: properties ?? {},\n        });\n    }\n    /**\n     * Replaces the properties of the View.\n     *\n     * @param properties - New properties of the View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const result = await view.replaceProperties({\n     *   consolidationIntervalMsec: 234\n     * });\n     * console.log(result.consolidationIntervalMsec); // 234\n     * ```\n     */\n    replaceProperties(properties) {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/view/${encodeURIComponent(this._name)}/properties`,\n            body: properties ?? {},\n        });\n    }\n    /**\n     * Deletes the View from the database.\n     *\n     * @example\n     *\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * await view.drop();\n     * // the View \"some-view\" no longer exists\n     * ```\n     */\n    drop() {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/view/${encodeURIComponent(this._name)}`,\n        }, (res) => res.body.result);\n    }\n}\nexports.View = View;\n//# sourceMappingURL=view.js.map","import React, { ChangeEvent, PureComponent } from 'react';\nimport { LegacyForms } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions /* MySecureJsonData */ } from './types';\n\nconst { /* SecretFormField, */ FormField } = LegacyForms;\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> {}\n\ninterface State {}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n    onPropChange =\n        (propName: keyof MyDataSourceOptions) =>\n        (event: ChangeEvent<HTMLInputElement>) => {\n            const { onOptionsChange, options } = this.props;\n            const jsonData: MyDataSourceOptions = {\n                ...options.jsonData,\n            };\n            (jsonData as Record<string, any>)[propName] = event.target.value;\n            onOptionsChange({ ...options, jsonData });\n        };\n\n    onDbUrlChange = this.onPropChange('dbUrl');\n    onDbNameChange = this.onPropChange('dbName');\n    onCollectionsRegexChange = this.onPropChange('collectionsRegex');\n    /*\n     *     // Secure field (only sent to the backend)\n     *     onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n     *         const { onOptionsChange, options } = this.props;\n     *         onOptionsChange({\n     *             ...options,\n     *             secureJsonData: {\n     *                 apiKey: event.target.value,\n     *             },\n     *         });\n     *     };\n     *\n     *     onResetAPIKey = () => {\n     *         const { onOptionsChange, options } = this.props;\n     *         onOptionsChange({\n     *             ...options,\n     *             secureJsonFields: {\n     *                 ...options.secureJsonFields,\n     *                 apiKey: false,\n     *             },\n     *             secureJsonData: {\n     *                 ...options.secureJsonData,\n     *                 apiKey: '',\n     *             },\n     *         });\n     *     };\n     *  */\n\n    render() {\n        const { options } = this.props;\n        const { jsonData /* secureJsonFields */ } = options;\n        /* const secureJsonData = (options.secureJsonData || {}) as MySecureJsonData; */\n\n        return (\n            <div className=\"gf-form-group\">\n                <div className=\"gf-form\">\n                    <p>No authentication support for now.</p>\n                    <p>Connection made from client side.</p>\n                </div>\n                <div className=\"gf-form\">\n                    <FormField\n                        label=\"Db url\"\n                        labelWidth={6}\n                        inputWidth={20}\n                        onChange={this.onDbUrlChange}\n                        value={jsonData.dbUrl || ''}\n                        placeholder=\"http://arango:8529\"\n                    />\n                </div>\n                <div className=\"gf-form\">\n                    <FormField\n                        label=\"Db name\"\n                        labelWidth={6}\n                        inputWidth={20}\n                        onChange={this.onDbNameChange}\n                        value={jsonData.dbName || ''}\n                        placeholder=\"test_database\"\n                    />\n                </div>\n                <div className=\"gf-form\">\n                    <FormField\n                        label=\"collectionsRegex\"\n                        labelWidth={6}\n                        inputWidth={20}\n                        onChange={this.onCollectionsRegexChange}\n                        value={jsonData.collectionsRegex || ''}\n                        placeholder=\".*\"\n                    />\n                </div>\n                {/* <div className=\"gf-form\">\n                    <FormField\n                    label=\"Path\"\n                    labelWidth={6}\n                    inputWidth={20}\n                    onChange={this.onPathChange}\n                    value={jsonData.path || ''}\n                    placeholder=\"json field returned to frontend\"\n                    />\n                    </div>\n\n                    <div className=\"gf-form-inline\">\n                    <div className=\"gf-form\">\n                    <SecretFormField\n                    isConfigured={\n                    (secureJsonFields && secureJsonFields.apiKey) as boolean\n                    }\n                    value={secureJsonData.apiKey || ''}\n                    label=\"API Key\"\n                    placeholder=\"secure json field (backend only)\"\n                    labelWidth={6}\n                    inputWidth={20}\n                    onReset={this.onResetAPIKey}\n                    onChange={this.onAPIKeyChange}\n                    />\n                    </div>\n                    </div> */}\n            </div>\n        );\n    }\n}\n","import defaults from 'lodash/defaults';\n\nimport React, { ChangeEvent, PureComponent } from 'react';\nimport { ActionMeta, Button, InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { defaultQuery, MyDataSourceOptions, Field, MyQuery } from './types';\n\nconst { FormField, Select } = LegacyForms;\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport class QueryEditor extends PureComponent<Props> {\n    onSelectChange =\n        (\n            propName: keyof MyQuery,\n            f: (value: string) => Promise<void> = () => Promise.resolve()\n        ) =>\n        (value: SelectableValue<string>, actionMeta: ActionMeta) => {\n            const { onChange, query } = this.props;\n            const newVal: Record<string, any> = { ...query };\n            newVal[propName] = value.value as string;\n            onChange(newVal as MyQuery);\n            f(value.value as string);\n        };\n    onCollectionChange = async (\n        value: SelectableValue<string>,\n        actionMeta: ActionMeta\n    ) => {\n        const { onChange, query } = this.props;\n        const { time, number_ } = await this.props.datasource.loadFieldsOf(\n            value.value as string\n        );\n        const newVal: Record<string, any> = {\n            ...query,\n            collectionName: value.value as string,\n            allTimeFields: time,\n            allNumberFields: number_,\n        };\n        onChange(newVal as MyQuery);\n    };\n    onTimestampFieldChange = this.onSelectChange('timestampField');\n    onValueFieldChange =\n        (i: number) => async (value: SelectableValue<string>, actionMeta: ActionMeta) => {\n            const { onChange, query } = this.props;\n            const valueFields = [...(query.valueFields ?? [])];\n            const old = valueFields[i] ?? {};\n            old.name = value.value ?? '';\n            valueFields[i] = old;\n            const newVal: Record<string, any> = {\n                ...query,\n                valueFields,\n            };\n            onChange(newVal as MyQuery);\n            console.log(query);\n        };\n    onAddField = async () => {\n        const { onChange, query } = this.props;\n        const valueFields = [...(query.valueFields ?? [])];\n        valueFields.push({});\n        const newVal: Record<string, any> = {\n            ...query,\n            valueFields,\n        };\n        onChange(newVal as MyQuery);\n    };\n    onRemoveField = (i: number) => async () => {\n        const { onChange, query } = this.props;\n        const valueFields = [...(query.valueFields ?? [])];\n        valueFields.splice(i, 1);\n        const newVal: Record<string, any> = {\n            ...query,\n            valueFields,\n        };\n        onChange(newVal as MyQuery);\n    };\n    onPrefixChange = async (event: ChangeEvent<HTMLInputElement>) => {\n        const { onChange, query } = this.props;\n        onChange({ ...query, prefix: event.target.value });\n    };\n    render() {\n        const query = defaults(this.props.query, defaultQuery);\n        const {\n            collectionName,\n            prefix,\n            timestampField,\n            valueFields,\n            allTimeFields,\n            allNumberFields,\n        } = query;\n\n        const fieldLabel = (f: Field) =>\n            f.example ? f.name + ' (' + f.example + ')' : f.name;\n        const fields = [];\n        for (let i = 0; i < valueFields.length; ++i) {\n            const valueField = valueFields[i].name;\n            fields.push(\n                <div className=\"gf-form\">\n                    <InlineFormLabel width={10}>Value field {i}</InlineFormLabel>\n                    <Select\n                        width={15}\n                        placeholder={'(none)'}\n                        defaultValue={0}\n                        options={allNumberFields.map((f) => ({\n                            label: fieldLabel(f),\n                            value: f.name,\n                        }))}\n                        value={{ label: valueField, value: valueField }}\n                        allowCustomValue={false}\n                        onChange={this.onValueFieldChange(i)}\n                    />\n                    <Button value={i} onClick={this.onRemoveField(i)}>\n                        Remove\n                    </Button>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <div className=\"gf-form\">\n                    <InlineFormLabel width={10}>Collection</InlineFormLabel>\n                    <Select\n                        width={30}\n                        placeholder={'(none)'}\n                        defaultValue={0}\n                        options={this.props.datasource.collections.map((c) => ({\n                            label: c.name,\n                            value: c.name,\n                        }))}\n                        value={{ label: collectionName, value: collectionName }}\n                        allowCustomValue={false}\n                        onChange={this.onCollectionChange}\n                    />\n                </div>\n                <div className=\"gf-form\">\n                    <FormField\n                        label=\"Prefix\"\n                        labelWidth={10}\n                        inputWidth={30}\n                        onChange={this.onPrefixChange}\n                        value={prefix}\n                        placeholder=\"http://arango:8529\"\n                    />\n                </div>\n                <div className=\"gf-form\">\n                    <InlineFormLabel width={10}>Timestamp field</InlineFormLabel>\n                    <Select\n                        width={30}\n                        placeholder={'(none)'}\n                        defaultValue={0}\n                        options={allTimeFields.map((f) => ({\n                            label: fieldLabel(f),\n                            value: f.name,\n                        }))}\n                        value={{ label: timestampField, value: timestampField }}\n                        allowCustomValue={true}\n                        onChange={this.onTimestampFieldChange}\n                    />\n                </div>\n                {fields}\n                <Button onClick={this.onAddField}>Add field</Button>\n            </div>\n        );\n    }\n}\n","import { Database } from 'arangojs';\nimport dayjs from 'dayjs';\nimport { CollectionMetadata } from 'arangojs/collection';\nimport _ from 'lodash';\n\nimport {\n    DataQueryRequest,\n    DataQueryResponse,\n    DataSourceApi,\n    DataSourceInstanceSettings,\n    MutableDataFrame,\n    FieldType,\n} from '@grafana/data';\n\nimport { MyQuery, MyDataSourceOptions, Field } from './types';\nconst customParseFormat = require('dayjs/plugin/customParseFormat');\ndayjs.extend(customParseFormat);\nlet advancedFormat = require('dayjs/plugin/advancedFormat');\ndayjs.extend(advancedFormat);\n\nfunction isValidDate(x: any) {\n    const d = dayjs(x);\n    return (\n        d.isValid() &&\n        d.isBefore(dayjs('2099-12-31T23:59:59Z')) &&\n        d.isAfter(dayjs('2000-01-01T00:00:00Z'))\n    );\n}\nfunction isValidUnixTimestamp(x: any) {\n    const d = dayjs(x, 'x', true);\n    return d.isValid();\n}\nexport class DataSource extends DataSourceApi<MyQuery, MyDataSourceOptions> {\n    arango: Database;\n    collections: CollectionMetadata[] = [];\n    constructor(\n        public instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>\n    ) {\n        super(instanceSettings);\n        const { dbUrl: url, dbName: databaseName } = this.instanceSettings.jsonData;\n        console.log({ url, databaseName });\n        this.arango = new Database({ url, databaseName });\n        void this.setup();\n    }\n    async setup() {\n        const { collectionsRegex } = this.instanceSettings.jsonData;\n        this.collections = (await this.arango.listCollections())\n            .filter(\n                (c) =>\n                    !collectionsRegex ||\n                    collectionsRegex === '' ||\n                    c.name.match(collectionsRegex)\n            )\n            .sort((a, b) => (a.name < b.name ? 1 : -1));\n        console.log(this.collections);\n    }\n    async loadFieldsOf(collection: string): Promise<{\n        time: Field[];\n        number_: Field[];\n    }> {\n        if (!this.collections.find((c) => c.name === collection)) {\n            return { time: [], number_: [] };\n        }\n        const res = await this.arango.query({\n            query: `FOR doc IN @@collection\n                       LIMIT 1\n                       RETURN doc`,\n            bindVars: { '@collection': collection },\n        });\n        const resObj = await res.next();\n        const fields = Object.keys(resObj);\n        const ret = {\n            time: fields\n                .filter((fk) => isValidDate(resObj[fk]))\n                .map((fk) => ({ name: fk, example: resObj[fk] })),\n            number_: fields\n                .filter((fk) => _.isNumber(resObj[fk]))\n                .map((fk) => ({ name: fk, example: resObj[fk] })),\n        };\n        console.log(ret);\n        return ret;\n    }\n\n    async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n        console.log('ArangoDataSource query called:', { options });\n        const { range } = options;\n        const from_ = range!.from.valueOf();\n        const to = range!.to.valueOf();\n\n        // Return a constant for each query.\n        let data = [];\n        const fieldAlias = (\n            name: string,\n            alias: string | undefined,\n            prefix: string | undefined\n        ) => {\n            const al = alias ?? name ?? '';\n            return prefix ? prefix + '_' + al : al;\n        };\n        for (const args of options.targets) {\n            if (!args.collectionName || args.hide) {\n                continue;\n            }\n            let fieldsQuery = '';\n            const fieldsBinds: Record<string, string> = {};\n            for (const field of args.valueFields) {\n                let { name, alias } = field;\n                const i = Object.keys(fieldsBinds).length;\n                if (!name) {\n                    continue;\n                }\n                fieldsQuery +=\n                    '`' +\n                    fieldAlias(name, alias, args.prefix) +\n                    '`:doc[@valueField' +\n                    i +\n                    '],';\n                fieldsBinds['valueField' + i] = name;\n            }\n            const query = `FOR doc IN @@collection\nFILTER date_timestamp(doc[@timefield]) >= date_timestamp(@from) AND date_timestamp(doc[@timefield]) <= date_timestamp(@to)\nSORT doc[@timefield]\nRETURN  {Time:doc[@timefield], ${fieldsQuery}}`;\n            console.log(query);\n            const result = await this.arango.query({\n                query,\n                bindVars: {\n                    '@collection': args.collectionName,\n                    timefield: args.timestampField,\n                    ...fieldsBinds,\n                    from: from_,\n                    to: to,\n                },\n            });\n            const records = await result.all();\n            const timeSample = records[0]?.Time;\n            let times: number[];\n            if (isValidUnixTimestamp(timeSample)) {\n                times = records.map((r) => r.Time);\n            } else {\n                times = records.map((r) => dayjs(r.Time).valueOf());\n            }\n            console.log(isValidUnixTimestamp(timeSample), timeSample);\n            // const values: number[] = records.map((r) => r.Value);\n            const frame = new MutableDataFrame({\n                refId: args.refId,\n                fields: [\n                    {\n                        name: 'Time',\n                        values: times,\n                        type: FieldType.time,\n                    },\n                    ...args.valueFields\n                        .filter((f) => !!f.name)\n                        .map((f) => {\n                            const alias = fieldAlias(\n                                f.name ?? 'Value',\n                                f.alias,\n                                args.prefix\n                            );\n                            return {\n                                name: alias,\n                                values: records.map((r) => r[alias]),\n                                type: FieldType.number,\n                            };\n                        }),\n                    // {\n                    //     name: 'Value',\n                    //     values: values,\n                    //     type: FieldType.number,\n                    // },\n                ],\n            });\n            data.push(frame);\n        }\n\n        return { data };\n    }\n\n    async testDatasource() {\n        const {\n            collectionsRegex,\n            dbUrl: url,\n            dbName: databaseName,\n        } = this.instanceSettings.jsonData;\n        // Implement a health check for your data source.\n\n        let success = true;\n        // try {\n        const arango = new Database({ url, databaseName });\n        let dbName = 'error';\n        let collections = 'error';\n        try {\n            dbName = (await arango.get()).name;\n            collections = (await arango.listCollections())\n                .filter((c) => c.name.match(collectionsRegex))\n                .map((c) => c.name)\n                .slice(0, 5)\n                .join(',');\n        } catch (e: any) {\n            success = false;\n            dbName = e.message;\n        }\n        return {\n            status: success,\n            message: `db=${dbName}, collections=[${collections},...]`,\n        };\n    }\n}\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport interface Field {\n    name?: string;\n    example?: string;\n    alias?: string;\n}\n\nexport interface MyQuery extends DataQuery {\n    collectionName: string;\n    prefix?: string;\n    timestampField: string;\n    valueFields: Field[];\n    allTimeFields: Field[];\n    allNumberFields: Field[];\n}\n\nexport const defaultQuery: Partial<MyQuery> = {\n    allTimeFields: [],\n    allNumberFields: [],\n    valueFields: [],\n};\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n    dbUrl?: string;\n    dbName?: string;\n    collectionsRegex: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MySecureJsonData {\n    apiKey?: string;\n}\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?l(1,0):l(31,11);case f:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,l=this;r=Number(r);var $=O.p(h),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===f)return this.set(f,this.$M+r);if($===c)return this.set(c,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},$={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||$[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,v=this-M,g=O.m(this,M);return g=($={},$[c]=g/12,$[f]=g,$[h]=g/3,$[o]=(v-m)/6048e5,$[a]=(v-m)/864e5,$[u]=v/n,$[s]=v/e,$[i]=v/t,$)[y]||v,l?g:O.a(g)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_advancedFormat=t()}(this,(function(){\"use strict\";return function(e,t){var r=t.prototype,n=r.format;r.format=function(e){var t=this,r=this.$locale();if(!this.isValid())return n.bind(this)(e);var s=this.$utils(),a=(e||\"YYYY-MM-DDTHH:mm:ssZ\").replace(/\\[([^\\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case\"Q\":return Math.ceil((t.$M+1)/3);case\"Do\":return r.ordinal(t.$D);case\"gggg\":return t.weekYear();case\"GGGG\":return t.isoWeekYear();case\"wo\":return r.ordinal(t.week(),\"W\");case\"w\":case\"ww\":return s.s(t.week(),\"w\"===e?1:2,\"0\");case\"W\":case\"WW\":return s.s(t.isoWeek(),\"W\"===e?1:2,\"0\");case\"k\":case\"kk\":return s.s(String(0===t.$H?24:t.$H),\"k\"===e?1:2,\"0\");case\"X\":return Math.floor(t.$d.getTime()/1e3);case\"x\":return t.$d.getTime();case\"z\":return\"[\"+t.offsetName()+\"]\";case\"zzz\":return\"[\"+t.offsetName(\"long\")+\"]\";default:return e}}));return n.bind(this)(a)}}}));","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_customParseFormat=t()}(this,(function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"},t=/(\\[[^[]*\\])|([-_:/.,()\\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,n=/\\d\\d/,r=/\\d\\d?/,i=/\\d*[^-_:/,()\\s\\d]+/,o={},s=function(e){return(e=+e)+(e>68?1900:2e3)};var a=function(e){return function(t){this[e]=+t}},f=[/[+-]\\d\\d:?(\\d\\d)?|Z/,function(e){(this.zone||(this.zone={})).offset=function(e){if(!e)return 0;if(\"Z\"===e)return 0;var t=e.match(/([+-]|\\d\\d)/g),n=60*t[1]+(+t[2]||0);return 0===n?0:\"+\"===t[0]?-n:n}(e)}],h=function(e){var t=o[e];return t&&(t.indexOf?t:t.s.concat(t.f))},u=function(e,t){var n,r=o.meridiem;if(r){for(var i=1;i<=24;i+=1)if(e.indexOf(r(i,0,t))>-1){n=i>12;break}}else n=e===(t?\"pm\":\"PM\");return n},d={A:[i,function(e){this.afternoon=u(e,!1)}],a:[i,function(e){this.afternoon=u(e,!0)}],S:[/\\d/,function(e){this.milliseconds=100*+e}],SS:[n,function(e){this.milliseconds=10*+e}],SSS:[/\\d{3}/,function(e){this.milliseconds=+e}],s:[r,a(\"seconds\")],ss:[r,a(\"seconds\")],m:[r,a(\"minutes\")],mm:[r,a(\"minutes\")],H:[r,a(\"hours\")],h:[r,a(\"hours\")],HH:[r,a(\"hours\")],hh:[r,a(\"hours\")],D:[r,a(\"day\")],DD:[n,a(\"day\")],Do:[i,function(e){var t=o.ordinal,n=e.match(/\\d+/);if(this.day=n[0],t)for(var r=1;r<=31;r+=1)t(r).replace(/\\[|\\]/g,\"\")===e&&(this.day=r)}],M:[r,a(\"month\")],MM:[n,a(\"month\")],MMM:[i,function(e){var t=h(\"months\"),n=(h(\"monthsShort\")||t.map((function(e){return e.slice(0,3)}))).indexOf(e)+1;if(n<1)throw new Error;this.month=n%12||n}],MMMM:[i,function(e){var t=h(\"months\").indexOf(e)+1;if(t<1)throw new Error;this.month=t%12||t}],Y:[/[+-]?\\d+/,a(\"year\")],YY:[n,function(e){this.year=s(e)}],YYYY:[/\\d{4}/,a(\"year\")],Z:f,ZZ:f};function c(n){var r,i;r=n,i=o&&o.formats;for(var s=(n=r.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var o=r&&r.toUpperCase();return n||i[r]||e[r]||i[o].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,n){return t||n.slice(1)}))}))).match(t),a=s.length,f=0;f<a;f+=1){var h=s[f],u=d[h],c=u&&u[0],l=u&&u[1];s[f]=l?{regex:c,parser:l}:h.replace(/^\\[|\\]$/g,\"\")}return function(e){for(var t={},n=0,r=0;n<a;n+=1){var i=s[n];if(\"string\"==typeof i)r+=i.length;else{var o=i.regex,f=i.parser,h=e.slice(r),u=o.exec(h)[0];f.call(t,u),e=e.replace(u,\"\")}}return function(e){var t=e.afternoon;if(void 0!==t){var n=e.hours;t?n<12&&(e.hours+=12):12===n&&(e.hours=0),delete e.afternoon}}(t),t}}return function(e,t,n){n.p.customParseFormat=!0,e&&e.parseTwoDigitYear&&(s=e.parseTwoDigitYear);var r=t.prototype,i=r.parse;r.parse=function(e){var t=e.date,r=e.utc,s=e.args;this.$u=r;var a=s[1];if(\"string\"==typeof a){var f=!0===s[2],h=!0===s[3],u=f||h,d=s[2];h&&(d=s[2]),o=this.$locale(),!f&&d&&(o=n.Ls[d]),this.$d=function(e,t,n){try{if([\"x\",\"X\"].indexOf(t)>-1)return new Date((\"X\"===t?1e3:1)*e);var r=c(t)(e),i=r.year,o=r.month,s=r.day,a=r.hours,f=r.minutes,h=r.seconds,u=r.milliseconds,d=r.zone,l=new Date,m=s||(i||o?1:l.getDate()),M=i||l.getFullYear(),Y=0;i&&!o||(Y=o>0?o-1:l.getMonth());var p=a||0,v=f||0,D=h||0,g=u||0;return d?new Date(Date.UTC(M,Y,m,p,v,D,g+60*d.offset*1e3)):n?new Date(Date.UTC(M,Y,m,p,v,D,g)):new Date(M,Y,m,p,v,D,g)}catch(e){return new Date(\"\")}}(t,a,r),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),u&&t!=this.format(a)&&(this.$d=new Date(\"\")),o={}}else if(a instanceof Array)for(var l=a.length,m=1;m<=l;m+=1){s[1]=a[m-1];var M=n.apply(this,s);if(M.isValid()){this.$d=M.$d,this.$L=M.$L,this.init();break}m===l&&(this.$d=new Date(\"\"))}else i.call(this,e)}}}));","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  if (!fn) {\n    return false\n  }\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","var baseRest = require('./_baseRest'),\n    eq = require('./eq'),\n    isIterateeCall = require('./_isIterateeCall'),\n    keysIn = require('./keysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nmodule.exports = defaults;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var trim = function(string) {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  var headersArr = trim(headers).split('\\n')\n\n  for (var i = 0; i < headersArr.length; i++) {\n    var row = headersArr[i]\n    var index = row.indexOf(':')\n    , key = trim(row.slice(0, index)).toLowerCase()\n    , value = trim(row.slice(index + 1))\n\n    if (typeof(result[key]) === 'undefined') {\n      result[key] = value\n    } else if (isArray(result[key])) {\n      result[key].push(value)\n    } else {\n      result[key] = [ result[key], value ]\n    }\n  }\n\n  return result\n}\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst LinkedListItem_1 = require(\"./LinkedListItem\");\r\n/**\r\n * Implements a linked list structure\r\n * @typeparam T Type of values within this LinkedList\r\n */\r\nclass LinkedList {\r\n    /**\r\n     * @param values Values to be added upfront into list\r\n     */\r\n    constructor(values) {\r\n        /**\r\n         * Current length of this LinkedList.\r\n         * Note that this does not work anymore if you for some reason add your own LinkedListItems to LinkedList by hand\r\n         */\r\n        this.length = 0;\r\n        /**\r\n         * Given to own LinkedListItem's for following jobs regarding an unlink:\r\n         * - If item is first item, set the next item as first item\r\n         * - If item is last item, set the previous item as last item\r\n         * - Decrease length\r\n         * @param item Item that has been unlinked\r\n         */\r\n        this.unlinkCleanup = (item) => {\r\n            if (this.first === item) {\r\n                this.first = this.first.behind;\r\n            }\r\n            if (this.last === item) {\r\n                this.last = this.last.before;\r\n            }\r\n            this.length--;\r\n        };\r\n        if (values) {\r\n            if (values instanceof LinkedList)\r\n                values = values.values();\r\n            for (const value of values) {\r\n                this.push(value);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Clears this LinkedList.\r\n     * The default complexity is O(1), because it only removes links to the first and last item and resets the length.\r\n     * Note that if any LinkedListItem is still referenced outside the LinkedList, their before and behind fields might\r\n     * still reference the chain, not freeing space.\r\n     * You can set the unchain parameter to true, so every item in the linked list will be unchained,\r\n     * meaning all references to before and behind items will be removed.\r\n     * This increases complexity to O(n), but removes accidental outside references to the full chain.\r\n     * @param unchain If `true`, remove link info from every item. Changes complexity to O(n)!\r\n     */\r\n    clear(unchain = false) {\r\n        if (unchain) {\r\n            while (this.first) {\r\n                this.first.unlink(true);\r\n            }\r\n        }\r\n        this.first = this.last = undefined;\r\n        this.length = 0;\r\n    }\r\n    /**\r\n     * As Array#every() given callback is called for every element until one call returns falsy or all elements had been processed\r\n     * @returns `false` if there was a falsy response from the callback, `true` if all elements have been processed \"falselesly\"\r\n     * @see Array#every\r\n     */\r\n    every(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const item of this.keys()) {\r\n            if (!callback(item.value, item, this)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Filters values into a new LinkedList\r\n     * @param callback decides wether given element should be part of new LinkedList\r\n     * @see Array#filter\r\n     */\r\n    filter(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        const newList = new LinkedList();\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                newList.push(value);\r\n            }\r\n        }\r\n        return newList;\r\n    }\r\n    /**\r\n     * Returns value for which given callback returns truthy\r\n     * @param callback runs for every value in LinkedList. If it returns truthy, current value is returned.\r\n     * @see Array#find\r\n     */\r\n    find(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns the LinkedListItem for which given callback returns truthy\r\n     * @param callback runs for every LinkedListItem in LinkedList. If it returns truthy, current LinkedListItem is returned.\r\n     * @see Array#findIndex\r\n     */\r\n    findItem(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterates this LinkedList's items and values\r\n     * @param callback Gets every value in LinkedList once with corresponding LinkedListItem and LinkedList\r\n     * @param thisArg If given, callback will be bound here\r\n     * @see Array#forEach\r\n     */\r\n    forEach(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            callback(value, item, this);\r\n        }\r\n    }\r\n    /**\r\n     * Checks if value can be found within LinkedList, starting from fromIndex, if given.\r\n     * @param value value to be found in this\r\n     * @param fromIndex Starting index. Supports negative values for which `this.size - 1 + fromIndex` will be used as starting point.\r\n     * @returns true if value could be found in LinkedList (respecting fromIndex), false otherwhise\r\n     * @see Array#includes\r\n     */\r\n    includes(value, fromIndex = 0) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === value) {\r\n                return true;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Searches forward for given value and returns the first corresponding LinkedListItem found\r\n     * @param searchedValue Value to be found\r\n     * @param fromIndex Index to start from\r\n     * @see Array#indexOf\r\n     */\r\n    itemOf(searchedValue, fromIndex = 0) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === searchedValue) {\r\n                return current;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * Searches backwards for given value and returns the first corresponding LinkedListItem found\r\n     * @param searchedValue Value to be found\r\n     * @param fromIndex Index to start from\r\n     * @see Array#indexOf\r\n     */\r\n    lastItemOf(searchedValue, fromIndex = -1) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === searchedValue) {\r\n                return current;\r\n            }\r\n            current = current.before;\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * Creates a new LinkedList with each of its itesm representing the output of the callback with each item in current LinkedList.\r\n     * @param callback Gets value, LinkedListeItem and LinkedList. The response will be used as value in the new LinkedList\r\n     * @param thisArg If given, callback is bound to thisArg\r\n     * @see Array#map\r\n     */\r\n    map(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        const newList = new LinkedList();\r\n        for (const [item, value] of this) {\r\n            newList.push(callback(value, item, this));\r\n        }\r\n        return newList;\r\n    }\r\n    reduce(callback, initialValue) {\r\n        let current = this.first;\r\n        if (!current) {\r\n            if (!initialValue) {\r\n                throw new TypeError(\"Empty accumulator on empty LinkedList is not allowed.\");\r\n            }\r\n            return initialValue;\r\n        }\r\n        if (initialValue === undefined) {\r\n            initialValue = current.value;\r\n            if (!current.behind) {\r\n                return initialValue;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        do {\r\n            initialValue = callback(initialValue, current.value, current, this);\r\n            current = current.behind;\r\n        } while (current);\r\n        return initialValue;\r\n    }\r\n    reduceRight(callback, initialValue) {\r\n        let current = this.last;\r\n        if (!current) {\r\n            if (!initialValue) {\r\n                throw new TypeError(\"Empty accumulator on empty LinkedList is not allowed.\");\r\n            }\r\n            return initialValue;\r\n        }\r\n        // let accumulator: V | T;\r\n        if (initialValue === undefined) {\r\n            initialValue = current.value;\r\n            if (!current.before) {\r\n                return initialValue;\r\n            }\r\n            current = current.before;\r\n        }\r\n        do {\r\n            initialValue = callback(initialValue, current.value, current, this);\r\n            current = current.before;\r\n        } while (current);\r\n        return initialValue;\r\n    }\r\n    /**\r\n     * Runs callback for every entry and returns true immediately if call of callback returns truthy.\r\n     * @param callback called for every element. If response is truthy, iteration\r\n     * @param thisArg If set, callback is bound to this\r\n     * @returns `true` once a callback call returns truthy, `false` if none returned truthy.\r\n     */\r\n    some(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Joins values within this by given separator. Uses Array#join directly.\r\n     * @param separator separator to be used\r\n     * @see Array#join\r\n     */\r\n    join(separator) {\r\n        return [...this.values()].join(separator);\r\n    }\r\n    /**\r\n     * Concats given values and returns a new LinkedList with all given values.\r\n     * If LinkedList's are given, they will be spread.\r\n     * @param others Other values or lists to be concat'ed together\r\n     * @see Array#concat\r\n     */\r\n    concat(...others) {\r\n        const newList = new LinkedList(this);\r\n        for (const other of others) {\r\n            if (other instanceof LinkedList) {\r\n                newList.push(...other.values());\r\n            }\r\n            else {\r\n                newList.push(other);\r\n            }\r\n        }\r\n        return newList;\r\n    }\r\n    /**\r\n     * Removes the last LinkedListItem and returns its inner value\r\n     */\r\n    pop() {\r\n        if (!this.last) {\r\n            return;\r\n        }\r\n        const item = this.last;\r\n        item.unlink();\r\n        return item.value;\r\n    }\r\n    /**\r\n     * Adds given values on the end of this LinkedList\r\n     * @param values Values to be added\r\n     */\r\n    push(...values) {\r\n        for (const value of values) {\r\n            const item = new LinkedListItem_1.LinkedListItem(value, this.unlinkCleanup);\r\n            if (!this.first || !this.last) {\r\n                this.first = this.last = item;\r\n            }\r\n            else {\r\n                this.last.insertBehind(item);\r\n                this.last = item;\r\n            }\r\n            this.length++;\r\n        }\r\n        return this.length;\r\n    }\r\n    /**\r\n     * Adds given values to the beginning of this LinkedList\r\n     * @param values Values to be added\r\n     */\r\n    unshift(...values) {\r\n        for (const value of values) {\r\n            const item = new LinkedListItem_1.LinkedListItem(value, this.unlinkCleanup);\r\n            if (!this.last || !this.first) {\r\n                this.first = this.last = item;\r\n            }\r\n            else {\r\n                item.insertBehind(this.first);\r\n                this.first = item;\r\n            }\r\n            this.length++;\r\n        }\r\n        return this.length;\r\n    }\r\n    /**\r\n     * Removes first occurrence of value found.\r\n     * @param value value to remove from LinkedList\r\n     */\r\n    remove(value) {\r\n        for (const item of this.keys()) {\r\n            if (item.value === value) {\r\n                item.unlink();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Removes every occurrance of value within this.\r\n     * @param value value to remove from LinkedList\r\n     */\r\n    removeAllOccurrences(value) {\r\n        let foundSomethingToDelete = false;\r\n        for (const item of this.keys()) {\r\n            if (item.value === value) {\r\n                item.unlink();\r\n                foundSomethingToDelete = true;\r\n            }\r\n        }\r\n        return foundSomethingToDelete;\r\n    }\r\n    /**\r\n     * Returns and removes first element from LinkedList\r\n     */\r\n    shift() {\r\n        if (!this.first) {\r\n            return;\r\n        }\r\n        const item = this.first;\r\n        item.unlink();\r\n        return item.value;\r\n    }\r\n    /**\r\n     * Returns LinkedListItem and value for every entry of this LinkedList\r\n     */\r\n    *[Symbol.iterator]() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield [current, current.value];\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns LinkedListItem and value for every entry of this LinkedList\r\n     * @see LinkedList#Symbol.iterator\r\n     */\r\n    entries() {\r\n        return this[Symbol.iterator]();\r\n    }\r\n    /**\r\n     * Iterates the LinkedListItem's of this LinkedList\r\n     */\r\n    *keys() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield current;\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns a value for every entry of this LinkedList\r\n     */\r\n    *values() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield current.value;\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns the item by given index.\r\n     * Supports negative values and will return the item at `LinkedList.size - 1 + index` in that case.\r\n     * @param index Index of item to get from list\r\n     */\r\n    getItemByIndex(index) {\r\n        if (index === undefined) {\r\n            throw new Error(\"index must be a number!\");\r\n        }\r\n        if (!this.first) {\r\n            return;\r\n        }\r\n        let current;\r\n        if (index > 0) {\r\n            current = this.first;\r\n            while (current && index--) {\r\n                current = current.behind;\r\n            }\r\n        }\r\n        else if (index < 0) {\r\n            current = this.last;\r\n            while (current && ++index) {\r\n                current = current.before;\r\n            }\r\n        }\r\n        else {\r\n            return this.first;\r\n        }\r\n        return current;\r\n    }\r\n}\r\nexports.LinkedList = LinkedList;\r\n//# sourceMappingURL=LinkedList.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Represents an Item within LinkedList.\r\n * An item holds a value and the links to other LinkedListItem's\r\n * LinkedListItem's can only be attached behind.\r\n * Theirfor, to add one before, before has to add one behind.\r\n */\r\nclass LinkedListItem {\r\n    /**\r\n     * @param value Value to be held\r\n     * @param unlinkCleanup Function to run on unlink() call. Usually used by LinkedList to fix first and last pointers and reduce length.\r\n     */\r\n    constructor(value, \r\n    /**\r\n     *\r\n     */\r\n    unlinkCleanup) {\r\n        this.value = value;\r\n        this.unlinkCleanup = unlinkCleanup;\r\n    }\r\n    /**\r\n     * This will link given LinkListItem behind this item.\r\n     * If there's already a LinkedListItem linked behind, it will be relinked accordingly\r\n     * @param item LinkListItem to be inserted behind this one\r\n     */\r\n    insertBehind(item) {\r\n        item.insertBefore(this);\r\n        if (this.behind) {\r\n            let itemChainEnd = item;\r\n            while (itemChainEnd.behind)\r\n                itemChainEnd = itemChainEnd.behind;\r\n            this.behind.insertBefore(itemChainEnd);\r\n            itemChainEnd.insertBehind(this.behind);\r\n        }\r\n        this.behind = item;\r\n    }\r\n    /**\r\n     * Unlinks this LinkedListItem and calls unlinkCleanup\r\n     * @param unchain If true, additionally removes the reference to the item before and behind\r\n     * @see LinkedListItem#unlinkCleanup\r\n     */\r\n    unlink(unchain = false) {\r\n        if (this.before)\r\n            this.before.behind = this.behind;\r\n        if (this.behind) {\r\n            this.behind.before = this.before;\r\n        }\r\n        if (this.unlinkCleanup) {\r\n            this.unlinkCleanup(this);\r\n        }\r\n        this.unlinkCleanup = undefined;\r\n        if (unchain) {\r\n            this.before = this.behind = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Item given will be inserted before this item.\r\n     * unlinkCleanup will be copied if neccessary.\r\n     * This function is protected, because LinkedListItem's can only be attached behind.\r\n     *\r\n     * @param before\r\n     * @see insertBehind\r\n     */\r\n    insertBefore(before) {\r\n        this.before = before;\r\n        if (!this.unlinkCleanup) {\r\n            this.unlinkCleanup = before.unlinkCleanup;\r\n        }\r\n    }\r\n}\r\nexports.LinkedListItem = LinkedListItem;\r\n//# sourceMappingURL=LinkedListItem.js.map","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./LinkedList\"));\r\n__export(require(\"./LinkedListItem\"));\r\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = createXHR;\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    // xhr.responseXML will throw Exception \"InvalidStateError\" or \"DOMException\"\n    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.\n    try {\n        if (xhr.responseType === \"document\") {\n            return xhr.responseXML\n        }\n        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n        if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n            return xhr.responseXML\n        }\n    } catch (e) {}\n\n    return null\n}\n\nfunction noop() {}\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_data__;","module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_ui__;","module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["React","PureComponent","LegacyForms","FormField","ConfigEditor","propName","event","props","onOptionsChange","options","jsonData","target","value","onPropChange","onDbUrlChange","dbUrl","onDbNameChange","dbName","onCollectionsRegexChange","collectionsRegex","defaults","Button","InlineFormLabel","defaultQuery","Select","QueryEditor","f","Promise","resolve","actionMeta","onChange","query","newVal","datasource","loadFieldsOf","time","number_","collectionName","allTimeFields","allNumberFields","onSelectChange","i","valueFields","old","name","console","log","push","splice","prefix","timestampField","fieldLabel","example","fields","length","valueField","map","label","onValueFieldChange","onRemoveField","collections","c","onCollectionChange","onPrefixChange","onTimestampFieldChange","onAddField","Database","dayjs","_","DataSourceApi","MutableDataFrame","FieldType","customParseFormat","require","extend","advancedFormat","isValidDate","x","d","isValid","isBefore","isAfter","isValidUnixTimestamp","DataSource","instanceSettings","url","databaseName","arango","setup","listCollections","filter","match","sort","a","b","collection","find","bindVars","res","next","resObj","Object","keys","ret","fk","isNumber","range","from_","from","valueOf","to","data","fieldAlias","alias","al","targets","args","hide","fieldsQuery","fieldsBinds","field","timefield","result","all","records","timeSample","Time","times","r","frame","refId","values","type","number","success","get","slice","join","message","status","DataSourcePlugin","plugin","setConfigEditor","setQueryEditor"],"sourceRoot":""}